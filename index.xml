<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>andrewghazi.github.io</title>
<link>https://andrewghazi.github.io/index.html</link>
<atom:link href="https://andrewghazi.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Fri, 06 Oct 2023 04:00:00 GMT</lastBuildDate>
<item>
  <title>Paste images from clipboard to Quarto/Rmarkdown</title>
  <dc:creator>Andrew Ghazi</dc:creator>
  <link>https://andrewghazi.github.io/posts/paste_image/paste_image.html</link>
  <description><![CDATA[ 




<p>A colleague asked if there was a way to paste an image from the clipboard to Rmd without having to manually save the image to a file and type out the file path. There’s no native way to do that as far as I can tell, but I came up with a bash script that:</p>
<ol type="1">
<li>saves the image from the clipboard to a specified file in my screenshots directory</li>
<li>then types <code>![](/path/to/the/file.png)</code> where my cursor is</li>
</ol>
<p>Bind this to a custom keyboard shortcut and you have the desired behavior.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">filepath</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/home/ghazi/Pictures/screenshots/<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span> +%Y_%m_%d_%I:%M:%S_%p<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span>.png</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">xclip</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-selection</span> clipboard <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> image/png <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$filepath</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sleep</span> .7</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">xdotool</span> type <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'![]('</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$filepath</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">')'</span></span></code></pre></div>
<p>Some other notes:</p>
<ul>
<li>When selecting a key combination, don’t include Alt as one of the modifiers as that can move the selection focus from the text box to the menu bar</li>
<li>The <code>sleep .7</code> is there because there needs to be time to <em>release</em> the keyboard shortcut, otherwise you’re effectively hitting dozens of Ctrl+Shift+&lt;every key on the file path&gt; shortcuts as the command is being typed before you’ve released them. This led to some <em>very</em> strange behavior before figuring that out.
<ul>
<li>It would be nicer to have a while loop that detects when all keys are released, but this is good enough for me.</li>
</ul></li>
</ul>
<p>But my colleague is on macOS, which has neither xclip nor xdotool nor a non-terrible way to add custom keyboard shortcuts. Oh well…</p>



 ]]></description>
  <category>Quarto</category>
  <category>Rmarkdown</category>
  <guid>https://andrewghazi.github.io/posts/paste_image/paste_image.html</guid>
  <pubDate>Fri, 06 Oct 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>geryon</title>
  <dc:creator>Andrew Ghazi</dc:creator>
  <link>https://andrewghazi.github.io/posts/geryon/geryon.html</link>
  <description><![CDATA[ 




<p>Like many R users, I have over time accrued a number of miscellaneous R functions that I put into a little utilities package. It’s called geryon. <a href="https://github.com/andrewGhazi/geryon">The readme</a> explains (most) of the functionality, but I’m quite fond of the logo:</p>
<p><img src="https://andrewghazi.github.io/posts/geryon/img/logo.png" class="img-fluid"></p>



 ]]></description>
  <category>R</category>
  <guid>https://andrewghazi.github.io/posts/geryon/geryon.html</guid>
  <pubDate>Fri, 06 Oct 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>ezpzmcmcpcpca package</title>
  <dc:creator>Andrew Ghazi</dc:creator>
  <link>https://andrewghazi.github.io/posts/ezpzmcmcpcpca/ezpzmcmcpcpca.html</link>
  <description><![CDATA[ 




<p>I made an R implementation of <a href="https://arxiv.org/abs/2012.07977">probabilistic contrastive principal components analysis, aka PCPCA</a>. As the name implies, this method allows you to <em>probabilistically</em> infer <em>contrastive</em> axes between experimental groups. “Contrastive” axes are directions in high dimensional space that help distinguish specified groups, rather than overall variation. More information <a href="https://github.com/andrewGhazi/ezpzmcmcpcpca/tree/main">on GitHub</a>.</p>
<p>R implementation of PCPCA. PCPCA is the work of Didong Li, Andrew Jones, and Barbara Engelhardt. Original manuscript here: https://arxiv.org/abs/2012.07977 and original Python implementation here: https://github.com/andrewcharlesjones/pcpca</p>
<p><img src="https://andrewghazi.github.io/posts/ezpzmcmcpcpca/images/bivar_plot.png" class="img-fluid"></p>



 ]]></description>
  <category>R</category>
  <category>Stan</category>
  <guid>https://andrewghazi.github.io/posts/ezpzmcmcpcpca/ezpzmcmcpcpca.html</guid>
  <pubDate>Sat, 30 Sep 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Tidyverse/data.table translations</title>
  <dc:creator>Andrew Ghazi</dc:creator>
  <link>https://andrewghazi.github.io/posts/tidy_dt/tidy_dt_translation.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://andrewghazi.github.io/posts/tidy_dt/images/who.png" class="img-fluid figure-img" style="width:75.0%"></p>
</figure>
</div>
<p>A list of common tidyverse/data.table commands that do (roughly) the same thing so that you can compare the syntax. Some opinions included.</p>
<section id="pros-and-cons" class="level1">
<h1>Pros and Cons</h1>
<section id="tidyverse" class="level2">
<h2 class="anchored" data-anchor-id="tidyverse">tidyverse</h2>
<section id="pros" class="level3">
<h3 class="anchored" data-anchor-id="pros">Pros</h3>
<ul>
<li>easy to read</li>
<li>easy to write</li>
<li>approachable to beginners</li>
<li>many useful convenience functions</li>
<li>tibble pretty print</li>
</ul>
</section>
<section id="cons" class="level3">
<h3 class="anchored" data-anchor-id="cons">Cons</h3>
<ul>
<li>relatively slow (though improving over time)</li>
<li>can be verbose</li>
<li>big dependency footprint</li>
<li>more prone to interface changes</li>
<li>typical usage with nonstandard evaluation doesn’t play nicely with CRAN</li>
</ul>
</section>
</section>
<section id="data.table" class="level2">
<h2 class="anchored" data-anchor-id="data.table">data.table</h2>
<section id="pros-1" class="level3">
<h3 class="anchored" data-anchor-id="pros-1">Pros</h3>
<ul>
<li><a href="https://h2oai.github.io/db-benchmark/">insane performance</a> 🔥</li>
<li>concise</li>
<li>no dependencies other than R itself</li>
<li><a href="https://stackoverflow.com/a/69508224">some built in parallelization</a> (but not on Mac without some pain)</li>
<li>some low-level features tidyverse probably won’t ever have (eg keys)</li>
</ul>
</section>
<section id="cons-1" class="level3">
<h3 class="anchored" data-anchor-id="cons-1">Cons</h3>
<ul>
<li>looks like a mish-mash of punctuation 6 months after the fact (this is gradually improving)</li>
<li>documentation can be arcane</li>
<li>modify by reference defies the general R convention of copy on modify</li>
<li>list columns don’t print as nicely</li>
</ul>
</section>
</section>
</section>
<section id="setup" class="level1">
<h1>Setup</h1>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.3     ✔ tibble    3.2.1
✔ lubridate 1.9.2     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'data.table'

The following objects are masked from 'package:lubridate':

    hour, isoweek, mday, minute, month, quarter, second, wday, week,
    yday, year

The following objects are masked from 'package:dplyr':

    between, first, last

The following object is masked from 'package:purrr':

    transpose</code></pre>
</div>
</div>
<p>We’ll edit the <code>mtcars</code> data frame as the example input.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mtcars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames_to_column</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>)</span>
<span id="cb5-2"></span>
<span id="cb5-3">mt_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb5-4">mt_dt  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>()</span></code></pre></div>
</details>
</div>
<p>I’ll throw in <code>|&gt; head()</code> where appropriate to reduce the size of the output. Some <code>data.table</code> operations that modify their input by reference don’t print afterwards (by design), so in these cases I’ll add an empty <code>[]</code> where necessary to do so.</p>
</section>
<section id="add-a-column" class="level1">
<h1>Add a column</h1>
<section id="tidy" class="level2">
<h2 class="anchored" data-anchor-id="tidy">tidy</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">mt_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">disp_per_cyl =</span> disp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cyl)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 13
   model         mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows
# ℹ 1 more variable: disp_per_cyl &lt;dbl&gt;</code></pre>
</div>
</div>
</section>
<section id="data.table-1" class="level2">
<h2 class="anchored" data-anchor-id="data.table-1">data.table</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">mt_dt[, disp_per_cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> disp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cyl]</span></code></pre></div>
</details>
</div>
<p>By default assignment by reference operations don’t print anything. You can tack an empty <code>[]</code> onto the end of that operation to get it to print.</p>
<p>OR, using the new DT()/let() syntax (requires development version of <code>data.table</code>):</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">mt_dt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DT</span>(, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">let</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">disp_per_cyl =</span> disp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cyl)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>               model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am
              &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;
1:         Mazda RX4  21.0     6   160   110  3.90 2.620 16.46     0     1
2:     Mazda RX4 Wag  21.0     6   160   110  3.90 2.875 17.02     0     1
3:        Datsun 710  22.8     4   108    93  3.85 2.320 18.61     1     1
4:    Hornet 4 Drive  21.4     6   258   110  3.08 3.215 19.44     1     0
5: Hornet Sportabout  18.7     8   360   175  3.15 3.440 17.02     0     0
6:           Valiant  18.1     6   225   105  2.76 3.460 20.22     1     0
    gear  carb disp_per_cyl
   &lt;num&gt; &lt;num&gt;        &lt;num&gt;
1:     4     4     26.66667
2:     4     4     26.66667
3:     4     1     27.00000
4:     3     1     43.00000
5:     3     2     45.00000
6:     3     1     37.50000</code></pre>
</div>
</div>
<p>The data.table walrus operator / <code>let()</code> assign by reference, so the <code>disp_per_cyl</code> column is added to <code>mt_dt</code> without using <code>&lt;-</code>. Let’s delete it.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">mt_dt[, disp_per_cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>]</span></code></pre></div>
</details>
</div>
</section>
<section id="multiple-columns" class="level2">
<h2 class="anchored" data-anchor-id="multiple-columns">Multiple columns</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">mt_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">disp_per_cyl =</span> disp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cyl,</span>
<span id="cb12-2">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hp_per_disp  =</span> hp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> disp)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 14
   model         mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows
# ℹ 2 more variables: disp_per_cyl &lt;dbl&gt;, hp_per_disp &lt;dbl&gt;</code></pre>
</div>
</div>
<p>versus</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">mt_dt[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">disp_per_cyl =</span> disp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cyl,</span>
<span id="cb14-2">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hp_per_disp  =</span> hp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> disp)]</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OR</span></span>
<span id="cb14-5"></span>
<span id="cb14-6">mt_dt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DT</span>(, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">let</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">disp_per_cyl =</span> disp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cyl,</span>
<span id="cb14-8">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hp_per_disp  =</span> hp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> disp)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>               model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am
              &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;
1:         Mazda RX4  21.0     6   160   110  3.90 2.620 16.46     0     1
2:     Mazda RX4 Wag  21.0     6   160   110  3.90 2.875 17.02     0     1
3:        Datsun 710  22.8     4   108    93  3.85 2.320 18.61     1     1
4:    Hornet 4 Drive  21.4     6   258   110  3.08 3.215 19.44     1     0
5: Hornet Sportabout  18.7     8   360   175  3.15 3.440 17.02     0     0
6:           Valiant  18.1     6   225   105  2.76 3.460 20.22     1     0
    gear  carb disp_per_cyl hp_per_disp
   &lt;num&gt; &lt;num&gt;        &lt;num&gt;       &lt;num&gt;
1:     4     4     26.66667   0.6875000
2:     4     4     26.66667   0.6875000
3:     4     1     27.00000   0.8611111
4:     3     1     43.00000   0.4263566
5:     3     2     45.00000   0.4861111
6:     3     1     37.50000   0.4666667</code></pre>
</div>
</div>
<p>Cleanup:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">mt_dt[,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">let</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">disp_per_cyl =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb16-2">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hp_per_disp  =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)]</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="filter" class="level1">
<h1>Filter</h1>
<section id="tidy-1" class="level2">
<h2 class="anchored" data-anchor-id="tidy-1">tidy</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">mt_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(disp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 12
  model          mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 Cadillac Fl…  10.4     8   472   205  2.93  5.25  18.0     0     0     3     4
2 Lincoln Con…  10.4     8   460   215  3     5.42  17.8     0     0     3     4</code></pre>
</div>
</div>
</section>
<section id="data.table-2" class="level2">
<h2 class="anchored" data-anchor-id="data.table-2">data.table</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">mt_dt[disp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>]</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>                 model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am
                &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;
1:  Cadillac Fleetwood  10.4     8   472   205  2.93 5.250 17.98     0     0
2: Lincoln Continental  10.4     8   460   215  3.00 5.424 17.82     0     0
    gear  carb
   &lt;num&gt; &lt;num&gt;
1:     3     4
2:     3     4</code></pre>
</div>
</div>
<p>If the condition is a pre-existing column, enclose it in parentheses:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">mt_dt[, big <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> disp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>]</span>
<span id="cb21-2"></span>
<span id="cb21-3">mt_dt[(big)]</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>                 model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am
                &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;
1:  Cadillac Fleetwood  10.4     8   472   205  2.93 5.250 17.98     0     0
2: Lincoln Continental  10.4     8   460   215  3.00 5.424 17.82     0     0
    gear  carb    big
   &lt;num&gt; &lt;num&gt; &lt;lgcl&gt;
1:     3     4   TRUE
2:     3     4   TRUE</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">mt_dt[, big <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>]</span></code></pre></div>
</details>
</div>
</section>
</section>
<section id="group-wise-summaries" class="level1">
<h1>Group-wise summaries</h1>
<p>Both can compute multiple summaries by adding additional named arguments to <code>summarise()</code> or <code>.()</code> (see Multiple columns above)</p>
<section id="tidy-2" class="level2">
<h2 class="anchored" data-anchor-id="tidy-2">tidy</h2>
<p>They recently introduced <code>.by</code> arguments in <code>dplyr 1.1.0</code>, which to me is much cleaner than a separate call to <code>group_by()</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">mt_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">avg_mpg =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(mpg), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> cyl)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
    cyl avg_mpg
  &lt;dbl&gt;   &lt;dbl&gt;
1     6    19.7
2     4    26.7
3     8    15.1</code></pre>
</div>
</div>
</section>
<section id="data.table-3" class="level2">
<h2 class="anchored" data-anchor-id="data.table-3">data.table</h2>
<p>We use the data.table <code>.()</code> alias for <code>list()</code></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">mt_dt[, .(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">avg_mpg =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(mpg)), by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> cyl]</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>     cyl  avg_mpg
   &lt;num&gt;    &lt;num&gt;
1:     6 19.74286
2:     4 26.66364
3:     8 15.10000</code></pre>
</div>
</div>
</section>
</section>
<section id="order" class="level1">
<h1>Order</h1>
<section id="tidy-3" class="level2">
<h2 class="anchored" data-anchor-id="tidy-3">tidy</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">mt_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(mpg)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 12
   model         mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 Cadillac F…  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4
 2 Lincoln Co…  10.4     8  460    215  3     5.42  17.8     0     0     3     4
 3 Camaro Z28   13.3     8  350    245  3.73  3.84  15.4     0     0     3     4
 4 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 5 Chrysler I…  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4
 6 Maserati B…  15       8  301    335  3.54  3.57  14.6     0     1     5     8
 7 Merc 450SLC  15.2     8  276.   180  3.07  3.78  18       0     0     3     3
 8 AMC Javelin  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2
 9 Dodge Chal…  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2
10 Ford Pante…  15.8     8  351    264  4.22  3.17  14.5     0     1     5     4
# ℹ 22 more rows</code></pre>
</div>
</div>
</section>
<section id="data.table-4" class="level2">
<h2 class="anchored" data-anchor-id="data.table-4">data.table</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">mt_dt[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(mpg)] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>                 model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am
                &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;
1:  Cadillac Fleetwood  10.4     8   472   205  2.93 5.250 17.98     0     0
2: Lincoln Continental  10.4     8   460   215  3.00 5.424 17.82     0     0
3:          Camaro Z28  13.3     8   350   245  3.73 3.840 15.41     0     0
4:          Duster 360  14.3     8   360   245  3.21 3.570 15.84     0     0
5:   Chrysler Imperial  14.7     8   440   230  3.23 5.345 17.42     0     0
6:       Maserati Bora  15.0     8   301   335  3.54 3.570 14.60     0     1
    gear  carb
   &lt;num&gt; &lt;num&gt;
1:     3     4
2:     3     4
3:     3     4
4:     3     4
5:     3     4
6:     5     8</code></pre>
</div>
</div>
<p>See also <code>?data.table::setkey()</code> and <code>?data.table::setorder()</code></p>
</section>
</section>
<section id="joins" class="level1">
<h1>Joins</h1>
<p>Ran out of time to finish this section, just see <a href="https://gist.github.com/nacnudus/ef3b22b79164bbf9c0ebafbf558f22a0">this gist</a> for data.table. dplyr joins have clear names <code>inner_join()</code>, <code>left_join</code>, <code>full_join()</code> etc.</p>
<p>data.table is faster under normal circumstances, and is WAY faster if both tables are already keyed. See also <code>?merge.data.table</code> for more complicated behavior.</p>
<section id="inner" class="level2">
<h2 class="anchored" data-anchor-id="inner">Inner</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(x,y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grp'</span>) </span>
<span id="cb32-2">Y[X, on <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grp'</span>, nomatch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</details>
</div>
</section>
<section id="left" class="level2">
<h2 class="anchored" data-anchor-id="left">Left</h2>
</section>
<section id="full" class="level2">
<h2 class="anchored" data-anchor-id="full">Full</h2>
</section>
</section>
<section id="operation-over-multiple-columns" class="level1">
<h1>Operation over multiple columns</h1>
<p>This sort of thing is much simpler/cleaner with tidyverse. Only switch to data.table if necessary.</p>
<section id="tidy-4" class="level2">
<h2 class="anchored" data-anchor-id="tidy-4">tidy</h2>
<p>across() + where()</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">mt_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.character), </span>
<span id="cb33-3">                   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(.x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 1
   model  
   &lt;chr&gt;  
 1 "Mazda"
 2 "Mazda"
 3 "Datsu"
 4 "Horne"
 5 "Horne"
 6 "Valia"
 7 "Duste"
 8 "Merc "
 9 "Merc "
10 "Merc "
# ℹ 22 more rows</code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">mt_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric),</span>
<span id="cb35-3">                   sum))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 11
    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  643.   198 7383.  4694  115.  103.  571.    14    13   118    90</code></pre>
</div>
</div>
<p>^ You can replace the <code>where()</code> calls with <code>everything()</code> or <code>matches('d')</code> or <code>c(mpg, cyl, disp)</code>, or any of the usual tidyselect patterns to pick out the columns needed.</p>
</section>
<section id="data.table-5" class="level2">
<h2 class="anchored" data-anchor-id="data.table-5">data.table</h2>
<ul>
<li>Get a character vector of the columns needed</li>
<li><code>lapply()</code> the intended function</li>
<li>Use the special variable <code>.SD</code> and argument <code>.SDcols</code></li>
</ul>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">num_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mt_dt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(is.numeric) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>()</span>
<span id="cb37-2"></span>
<span id="cb37-3">mt_dt[, (num_cols) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(.SD, sum), .SDcols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> num_cols][]</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>                  model   mpg   cyl   disp    hp   drat      wt   qsec    vs
                 &lt;char&gt; &lt;num&gt; &lt;num&gt;  &lt;num&gt; &lt;num&gt;  &lt;num&gt;   &lt;num&gt;  &lt;num&gt; &lt;num&gt;
 1:           Mazda RX4 642.9   198 7383.1  4694 115.09 102.952 571.16    14
 2:       Mazda RX4 Wag 642.9   198 7383.1  4694 115.09 102.952 571.16    14
 3:          Datsun 710 642.9   198 7383.1  4694 115.09 102.952 571.16    14
 4:      Hornet 4 Drive 642.9   198 7383.1  4694 115.09 102.952 571.16    14
 5:   Hornet Sportabout 642.9   198 7383.1  4694 115.09 102.952 571.16    14
 6:             Valiant 642.9   198 7383.1  4694 115.09 102.952 571.16    14
 7:          Duster 360 642.9   198 7383.1  4694 115.09 102.952 571.16    14
 8:           Merc 240D 642.9   198 7383.1  4694 115.09 102.952 571.16    14
 9:            Merc 230 642.9   198 7383.1  4694 115.09 102.952 571.16    14
10:            Merc 280 642.9   198 7383.1  4694 115.09 102.952 571.16    14
11:           Merc 280C 642.9   198 7383.1  4694 115.09 102.952 571.16    14
12:          Merc 450SE 642.9   198 7383.1  4694 115.09 102.952 571.16    14
13:          Merc 450SL 642.9   198 7383.1  4694 115.09 102.952 571.16    14
14:         Merc 450SLC 642.9   198 7383.1  4694 115.09 102.952 571.16    14
15:  Cadillac Fleetwood 642.9   198 7383.1  4694 115.09 102.952 571.16    14
16: Lincoln Continental 642.9   198 7383.1  4694 115.09 102.952 571.16    14
17:   Chrysler Imperial 642.9   198 7383.1  4694 115.09 102.952 571.16    14
18:            Fiat 128 642.9   198 7383.1  4694 115.09 102.952 571.16    14
19:         Honda Civic 642.9   198 7383.1  4694 115.09 102.952 571.16    14
20:      Toyota Corolla 642.9   198 7383.1  4694 115.09 102.952 571.16    14
21:       Toyota Corona 642.9   198 7383.1  4694 115.09 102.952 571.16    14
22:    Dodge Challenger 642.9   198 7383.1  4694 115.09 102.952 571.16    14
23:         AMC Javelin 642.9   198 7383.1  4694 115.09 102.952 571.16    14
24:          Camaro Z28 642.9   198 7383.1  4694 115.09 102.952 571.16    14
25:    Pontiac Firebird 642.9   198 7383.1  4694 115.09 102.952 571.16    14
26:           Fiat X1-9 642.9   198 7383.1  4694 115.09 102.952 571.16    14
27:       Porsche 914-2 642.9   198 7383.1  4694 115.09 102.952 571.16    14
28:        Lotus Europa 642.9   198 7383.1  4694 115.09 102.952 571.16    14
29:      Ford Pantera L 642.9   198 7383.1  4694 115.09 102.952 571.16    14
30:        Ferrari Dino 642.9   198 7383.1  4694 115.09 102.952 571.16    14
31:       Maserati Bora 642.9   198 7383.1  4694 115.09 102.952 571.16    14
32:          Volvo 142E 642.9   198 7383.1  4694 115.09 102.952 571.16    14
                  model   mpg   cyl   disp    hp   drat      wt   qsec    vs
       am  gear  carb
    &lt;num&gt; &lt;num&gt; &lt;num&gt;
 1:    13   118    90
 2:    13   118    90
 3:    13   118    90
 4:    13   118    90
 5:    13   118    90
 6:    13   118    90
 7:    13   118    90
 8:    13   118    90
 9:    13   118    90
10:    13   118    90
11:    13   118    90
12:    13   118    90
13:    13   118    90
14:    13   118    90
15:    13   118    90
16:    13   118    90
17:    13   118    90
18:    13   118    90
19:    13   118    90
20:    13   118    90
21:    13   118    90
22:    13   118    90
23:    13   118    90
24:    13   118    90
25:    13   118    90
26:    13   118    90
27:    13   118    90
28:    13   118    90
29:    13   118    90
30:    13   118    90
31:    13   118    90
32:    13   118    90
       am  gear  carb</code></pre>
</div>
</div>
</section>
</section>
<section id="separate" class="level1">
<h1>Separate</h1>
<p>Useful for splitting <code>g__Eschericia.s__Eschericia_coli</code> type identifiers.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x-y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x-z"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y-z"</span>))</span></code></pre></div>
</details>
</div>
<p>benchmark:</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">N <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5e5</span></span>
<span id="cb40-2"></span>
<span id="cb40-3">microbenchmark<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">microbenchmark</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> {</span>
<span id="cb40-4">                                 df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(letters, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb40-5">                                                               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>, </span>
<span id="cb40-6">                                                               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(LETTERS, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)))},</span>
<span id="cb40-7">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i2 =</span> {</span>
<span id="cb40-8">                                 df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(letters, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb40-9">                                                               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>, </span>
<span id="cb40-10">                                                               <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(LETTERS, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)))},</span>
<span id="cb40-11">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">separate =</span> {</span>
<span id="cb40-12">                                 df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(letters, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb40-13">                                                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>, </span>
<span id="cb40-14">                                                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(LETTERS, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)))</span>
<span id="cb40-15">                                 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span>(df, x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">into =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x2"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)},</span>
<span id="cb40-16">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">separate_wider_delim =</span> {</span>
<span id="cb40-17">                                 df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(letters, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb40-18">                                                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>, </span>
<span id="cb40-19">                                                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(LETTERS, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)))</span>
<span id="cb40-20">                                 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate_wider_delim</span>(df, x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x2"</span>))},</span>
<span id="cb40-21">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">separate_wider_position =</span> {</span>
<span id="cb40-22">                                 df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(letters, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb40-23">                                                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>, </span>
<span id="cb40-24">                                                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(LETTERS, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)))</span>
<span id="cb40-25">                                 <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate_wider_position</span>(df, x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">widths =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))},</span>
<span id="cb40-26">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tstrsplit =</span> {</span>
<span id="cb40-27">                                 df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(letters, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), </span>
<span id="cb40-28">                                                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>, </span>
<span id="cb40-29">                                                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(LETTERS, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)))</span>
<span id="cb40-30">                                 df[, (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x2"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tstrsplit</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">split =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)]},</span>
<span id="cb40-31">                               </span>
<span id="cb40-32">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Unit: milliseconds
                    expr        min         lq       mean     median         uq
                       i   63.96737   64.30023   81.00819   64.36162   66.06541
                      i2   64.53642   64.72288   67.50833   64.91381   70.61786
                separate 2919.57025 3057.39715 3067.08865 3060.66249 3122.98067
    separate_wider_delim  244.09480  307.98958  323.33088  317.76700  325.17817
 separate_wider_position  710.21562  774.00268  834.16832  832.97877  906.67124
               tstrsplit  186.00963  186.64617  203.94531  190.39219  211.37181
        max neval   cld
  146.34635     5 ab   
   72.75069     5 a    
 3174.83270     5   c  
  421.62486     5    d 
  946.97328     5     e
  245.30674     5  b d </code></pre>
</div>
</div>
<section id="tidy-5" class="level2">
<h2 class="anchored" data-anchor-id="tidy-5">tidy</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate_wider_delim</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delim =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>,</span>
<span id="cb42-3">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x2'</span>))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 500,000 × 2
   x1    x2   
   &lt;chr&gt; &lt;chr&gt;
 1 x     S    
 2 p     E    
 3 a     X    
 4 n     Y    
 5 z     F    
 6 g     B    
 7 w     P    
 8 m     T    
 9 s     F    
10 b     O    
# ℹ 499,990 more rows</code></pre>
</div>
</div>
<p>This is one circumstance where an interface change bit me. It used to be that <code>separate()</code> with a data.table input would return a data.table output, now it gets converted to a tibble. <code>separate_wider_delim()</code> is still listed as “lifecycle: experimental”, so that may change too.</p>
</section>
<section id="data.table-6" class="level2">
<h2 class="anchored" data-anchor-id="data.table-6">data.table</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(df)[, (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x2"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tstrsplit</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">split =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)][]</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>             x     x1     x2
        &lt;char&gt; &lt;char&gt; &lt;char&gt;
     1:    x-S      x      S
     2:    p-E      p      E
     3:    a-X      a      X
     4:    n-Y      n      Y
     5:    z-F      z      F
    ---                     
499996:    n-Z      n      Z
499997:    o-Z      o      Z
499998:    r-N      r      N
499999:    l-Z      l      Z
500000:    m-B      m      B</code></pre>
</div>
</div>
<p>The <code>tstrsplit()</code> approach is ~10x faster than <code>tidyr::separate()</code>, but only about 1.5x faster than <code>separate_wider_delim()</code>.</p>
</section>
</section>
<section id="unite" class="level1">
<h1>Unite</h1>
<p>Inverse operation of separate.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x1 =</span> letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],</span>
<span id="cb46-2">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x2 =</span> LETTERS[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</details>
</div>
<section id="tidy-6" class="level2">
<h2 class="anchored" data-anchor-id="tidy-6">tidy</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unite</span>(x,</span>
<span id="cb47-2">            x1, x2,</span>
<span id="cb47-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>    x
1 a-A
2 b-B
3 c-C
4 d-D
5 e-E</code></pre>
</div>
</div>
</section>
<section id="data.table-7" class="level2">
<h2 class="anchored" data-anchor-id="data.table-7">data.table</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(df)[, x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(x1, x2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)][]</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>       x1     x2      x
   &lt;char&gt; &lt;char&gt; &lt;char&gt;
1:      a      A    a-A
2:      b      B    b-B
3:      c      C    c-C
4:      d      D    d-D
5:      e      E    e-E</code></pre>
</div>
</div>
</section>
</section>
<section id="transpose" class="level1">
<h1>transpose</h1>
<p>One situation where data.table is more elegant. Note that this is NOT what <code>purrr::transpose()</code> does.</p>
<section id="tidy-7" class="level2">
<h2 class="anchored" data-anchor-id="tidy-7">tidy</h2>
<p>Try <code>input_tbl |&gt; as.matrix() |&gt; t() |&gt; as_tibble()</code> if your variable types work, otherwise try <code>input_tbl |&gt; pivot_longer() |&gt; pivot_wider()</code> as needed.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">mt_tbl[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">column_to_rownames</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb51-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb51-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames_to_column</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'variable'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 11 × 5
   variable `Mazda RX4` `Mazda RX4 Wag` `Datsun 710` `Hornet 4 Drive`
   &lt;chr&gt;          &lt;dbl&gt;           &lt;dbl&gt;        &lt;dbl&gt;            &lt;dbl&gt;
 1 mpg            21              21           22.8             21.4 
 2 cyl             6               6            4                6   
 3 disp          160             160          108              258   
 4 hp            110             110           93              110   
 5 drat            3.9             3.9          3.85             3.08
 6 wt              2.62            2.88         2.32             3.22
 7 qsec           16.5            17.0         18.6             19.4 
 8 vs              0               0            1                1   
 9 am              1               1            1                0   
10 gear            4               4            4                3   
11 carb            4               4            1                1   </code></pre>
</div>
</div>
</section>
<section id="data.table-8" class="level2">
<h2 class="anchored" data-anchor-id="data.table-8">data.table</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">data.table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transpose</span>(mt_dt[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,],</span>
<span id="cb53-2">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">make.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MAKE this variable the new names</span></span>
<span id="cb53-3">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">keep.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'variable'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># KEEP the old names in this variable</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>    variable Mazda RX4 Mazda RX4 Wag Datsun 710 Hornet 4 Drive
      &lt;char&gt;     &lt;num&gt;         &lt;num&gt;      &lt;num&gt;          &lt;num&gt;
 1:      mpg     21.00        21.000      22.80         21.400
 2:      cyl      6.00         6.000       4.00          6.000
 3:     disp    160.00       160.000     108.00        258.000
 4:       hp    110.00       110.000      93.00        110.000
 5:     drat      3.90         3.900       3.85          3.080
 6:       wt      2.62         2.875       2.32          3.215
 7:     qsec     16.46        17.020      18.61         19.440
 8:       vs      0.00         0.000       1.00          1.000
 9:       am      1.00         1.000       1.00          0.000
10:     gear      4.00         4.000       4.00          3.000
11:     carb      4.00         4.000       1.00          1.000</code></pre>
</div>
</div>
</section>
</section>
<section id="nesting" class="level1">
<h1>Nesting</h1>
<p><code>split()</code> and <code>dplyr::group_split()</code> may be preferable if setting up a call to <code>future_map()</code> or something.</p>
<section id="tidy-8" class="level2">
<h2 class="anchored" data-anchor-id="tidy-8">tidy</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">mt_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> cyl)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
    cyl data              
  &lt;dbl&gt; &lt;list&gt;            
1     6 &lt;tibble [7 × 11]&gt; 
2     4 &lt;tibble [11 × 11]&gt;
3     8 &lt;tibble [14 × 11]&gt;</code></pre>
</div>
</div>
</section>
<section id="data.table-9" class="level2">
<h2 class="anchored" data-anchor-id="data.table-9">data.table</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">mt_dt[, .(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> .(.SD)), by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> cyl]</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>     cyl                data
   &lt;num&gt;              &lt;list&gt;
1:     6  &lt;data.table[7x11]&gt;
2:     4 &lt;data.table[11x11]&gt;
3:     8 &lt;data.table[14x11]&gt;</code></pre>
</div>
</div>
</section>
</section>
<section id="unnesting" class="level1">
<h1>Unnesting</h1>
<p><code>tidyr::unnest</code> is usually faster than the <code>rbindlist</code> approach, though if you have only one column in the nested column, the <code>unlist</code> approach is the fastest of all.</p>
<section id="tidy-9" class="level2">
<h2 class="anchored" data-anchor-id="tidy-9">tidy</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1">nested <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mt_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> cyl)</span>
<span id="cb59-2">nested <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(data)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 12
     cyl model         mpg  disp    hp  drat    wt  qsec    vs    am  gear  carb
   &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1     6 Mazda RX4    21    160    110  3.9   2.62  16.5     0     1     4     4
 2     6 Mazda RX4 …  21    160    110  3.9   2.88  17.0     0     1     4     4
 3     6 Hornet 4 D…  21.4  258    110  3.08  3.22  19.4     1     0     3     1
 4     6 Valiant      18.1  225    105  2.76  3.46  20.2     1     0     3     1
 5     6 Merc 280     19.2  168.   123  3.92  3.44  18.3     1     0     4     4
 6     6 Merc 280C    17.8  168.   123  3.92  3.44  18.9     1     0     4     4
 7     6 Ferrari Di…  19.7  145    175  3.62  2.77  15.5     0     1     5     6
 8     4 Datsun 710   22.8  108     93  3.85  2.32  18.6     1     1     4     1
 9     4 Merc 240D    24.4  147.    62  3.69  3.19  20       1     0     4     2
10     4 Merc 230     22.8  141.    95  3.92  3.15  22.9     1     0     4     2
# ℹ 22 more rows</code></pre>
</div>
</div>
</section>
<section id="data.table-10" class="level2">
<h2 class="anchored" data-anchor-id="data.table-10">data.table</h2>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">nested <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mt_dt[, .(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(.SD)), by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> cyl]</span>
<span id="cb61-2">nested[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbindlist</span>(data), by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> cyl] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>     cyl          model   mpg  disp    hp  drat    wt  qsec    vs    am  gear
   &lt;num&gt;         &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;
1:     6      Mazda RX4  21.0 160.0   110  3.90 2.620 16.46     0     1     4
2:     6  Mazda RX4 Wag  21.0 160.0   110  3.90 2.875 17.02     0     1     4
3:     6 Hornet 4 Drive  21.4 258.0   110  3.08 3.215 19.44     1     0     3
4:     6        Valiant  18.1 225.0   105  2.76 3.460 20.22     1     0     3
5:     6       Merc 280  19.2 167.6   123  3.92 3.440 18.30     1     0     4
6:     6      Merc 280C  17.8 167.6   123  3.92 3.440 18.90     1     0     4
    carb
   &lt;num&gt;
1:     4
2:     4
3:     1
4:     1
5:     4
6:     4</code></pre>
</div>
</div>
<p>If there’s only one column in the nested column:</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1">dt[,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(data), by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> group]</span></code></pre></div>
</details>
</div>
<p><a href="https://www.johannesbgruber.eu/post/a-faster-unnest/">This can be adapted to unlisting multiple nested columns</a>, but as far as I can tell it can’t unlist from one nested column into multiple nested columns.</p>
</section>
</section>
<section id="data.table-keysindices" class="level1">
<h1>data.table keys/indices</h1>
<p>These are really useful for speeding up repeated joins, which can easily be sped up ~100-fold with keys, though this may be offset by the computation required to set the key depending on the circumstance. See <code>?setkey</code> and the <code>key</code> argument in <code>fread()</code>. See <a href="https://rdatatable.gitlab.io/data.table/articles/datatable-keys-fast-subset.html">the data.table vignette</a></p>
</section>
<section id="data.table-special-variables" class="level1">
<h1>data.table special variables</h1>
<p>https://rdatatable.gitlab.io/data.table/reference/special-symbols.html</p>
<p>Most common/important ones are .N (group-wise counts) and .SD (group-wise data subset)</p>
</section>
<section id="session-info" class="level1">
<h1>session info</h1>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1">sessioninfo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">session_info</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>─ Session info ───────────────────────────────────────────────────────────────
 setting  value
 version  R version 4.3.1 (2023-06-16)
 os       Pop!_OS 22.04 LTS
 system   x86_64, linux-gnu
 ui       X11
 language (EN)
 collate  en_US.UTF-8
 ctype    en_US.UTF-8
 tz       America/New_York
 date     2023-09-30
 pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)

─ Packages ───────────────────────────────────────────────────────────────────
 package        * version date (UTC) lib source
 cli              3.6.1   2023-03-23 [1] CRAN (R 4.3.0)
 codetools        0.2-19  2023-02-01 [4] CRAN (R 4.2.2)
 colorspace       2.1-0   2023-01-23 [1] CRAN (R 4.3.0)
 data.table     * 1.14.9  2023-09-29 [1] local
 digest           0.6.33  2023-07-07 [1] CRAN (R 4.3.1)
 dplyr          * 1.1.3   2023-09-03 [1] CRAN (R 4.3.1)
 evaluate         0.21    2023-05-05 [1] CRAN (R 4.3.1)
 fansi            1.0.4   2023-01-22 [1] CRAN (R 4.3.0)
 fastmap          1.1.1   2023-02-24 [1] CRAN (R 4.3.0)
 forcats        * 1.0.0   2023-01-29 [1] CRAN (R 4.3.0)
 generics         0.1.3   2022-07-05 [1] CRAN (R 4.3.0)
 ggplot2        * 3.4.3   2023-08-14 [1] CRAN (R 4.3.1)
 glue             1.6.2   2022-02-24 [1] CRAN (R 4.3.0)
 gtable           0.3.4   2023-08-21 [1] CRAN (R 4.3.1)
 hms              1.1.3   2023-03-21 [1] CRAN (R 4.3.0)
 htmltools        0.5.6   2023-08-10 [1] CRAN (R 4.3.1)
 htmlwidgets      1.6.2   2023-03-17 [1] CRAN (R 4.3.1)
 jsonlite         1.8.7   2023-06-29 [1] CRAN (R 4.3.1)
 knitr            1.43    2023-05-25 [1] CRAN (R 4.3.1)
 lattice          0.21-8  2023-04-05 [4] CRAN (R 4.3.0)
 lifecycle        1.0.3   2022-10-07 [1] CRAN (R 4.3.0)
 lubridate      * 1.9.2   2023-02-10 [1] CRAN (R 4.3.0)
 magrittr         2.0.3   2022-03-30 [1] CRAN (R 4.3.0)
 MASS             7.3-60  2023-05-04 [4] CRAN (R 4.3.1)
 Matrix           1.6-0   2023-07-08 [4] CRAN (R 4.3.1)
 microbenchmark   1.4.10  2023-04-28 [1] CRAN (R 4.3.1)
 multcomp         1.4-25  2023-06-20 [1] CRAN (R 4.3.1)
 munsell          0.5.0   2018-06-12 [1] CRAN (R 4.3.0)
 mvtnorm          1.2-3   2023-08-25 [1] CRAN (R 4.3.1)
 pillar           1.9.0   2023-03-22 [1] CRAN (R 4.3.0)
 pkgconfig        2.0.3   2019-09-22 [1] CRAN (R 4.3.0)
 purrr          * 1.0.2   2023-08-10 [1] CRAN (R 4.3.1)
 R6               2.5.1   2021-08-19 [1] CRAN (R 4.3.0)
 readr          * 2.1.4   2023-02-10 [1] CRAN (R 4.3.0)
 rlang            1.1.1   2023-04-28 [1] CRAN (R 4.3.1)
 rmarkdown        2.24    2023-08-14 [1] CRAN (R 4.3.1)
 rstudioapi       0.15.0  2023-07-07 [1] CRAN (R 4.3.1)
 sandwich         3.0-2   2022-06-15 [1] CRAN (R 4.3.1)
 scales           1.2.1   2022-08-20 [1] CRAN (R 4.3.0)
 sessioninfo      1.2.2   2021-12-06 [1] CRAN (R 4.3.1)
 stringi          1.7.12  2023-01-11 [1] CRAN (R 4.3.0)
 stringr        * 1.5.0   2022-12-02 [1] CRAN (R 4.3.0)
 survival         3.5-5   2023-03-12 [4] CRAN (R 4.3.1)
 TH.data          1.1-2   2023-04-17 [1] CRAN (R 4.3.1)
 tibble         * 3.2.1   2023-03-20 [1] CRAN (R 4.3.0)
 tidyr          * 1.3.0   2023-01-24 [1] CRAN (R 4.3.0)
 tidyselect       1.2.0   2022-10-10 [1] CRAN (R 4.3.0)
 tidyverse      * 2.0.0   2023-02-22 [1] CRAN (R 4.3.0)
 timechange       0.2.0   2023-01-11 [1] CRAN (R 4.3.0)
 tzdb             0.4.0   2023-05-12 [1] CRAN (R 4.3.1)
 utf8             1.2.3   2023-01-31 [1] CRAN (R 4.3.0)
 vctrs            0.6.3   2023-06-14 [1] CRAN (R 4.3.1)
 withr            2.5.0   2022-03-03 [1] CRAN (R 4.3.0)
 xfun             0.40    2023-08-09 [1] CRAN (R 4.3.1)
 yaml             2.3.7   2023-01-23 [1] CRAN (R 4.3.0)
 zoo              1.8-12  2023-04-13 [1] CRAN (R 4.3.1)

 [1] /home/ghazi/R/x86_64-pc-linux-gnu-library/4.3
 [2] /usr/local/lib/R/site-library
 [3] /usr/lib/R/site-library
 [4] /usr/lib/R/library

──────────────────────────────────────────────────────────────────────────────</code></pre>
</div>
</div>


<!-- -->

</section>

 ]]></description>
  <category>R</category>
  <guid>https://andrewghazi.github.io/posts/tidy_dt/tidy_dt_translation.html</guid>
  <pubDate>Thu, 28 Sep 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Integrated LOO walkthrough</title>
  <dc:creator>Andrew Ghazi</dc:creator>
  <link>https://andrewghazi.github.io/posts/int_loo/integrated_loo.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is a guide/walkthrough on how to use the “Integrated Importance Sampling” aka “Integrated LOO” technique from <span class="citation" data-cites="vehtari_bayesian">(Vehtari et al. 2016)</span>. I’ve found myself needing to do this a couple times now, so I’m writing this walkthrough to:</p>
<ul>
<li>crystallize my thoughts</li>
<li>record my notes on how it works / how it’s done</li>
<li>explain how it works in more depth than <a href="https://avehtari.github.io/modelselection/roaches.html#5_Poisson_model_with_%E2%80%9Crandom_effects%E2%80%9D_and_integrated_LOO">the existing example I know of</a></li>
<li>Demonstrate a more complicated example involving conditional parameter distributions</li>
<li>show how to perform the integral more flexibly in R / outside of Stan</li>
</ul>
<p>Load some setup libraries:</p>
<div class="cell" data-hash="integrated_loo_cache/html/unnamed-chunk-1_adb1fa5edb404d74bfe907a4ee1e69d4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(cmdstanr)</span></code></pre></div>
</details>
</div>
</section>
<section id="why-use-integrated-loo" class="level1">
<h1>Why use integrated LOO?</h1>
<p>The LOO method as implemented in the <code>loo</code> package requires an array of log-likelihood values for every observation at every iteration in the MCMC chains. There are some addtional complications around extensions like k-fold LOO and leave-one-group-out, but I’m going to ignore those. There’s a built in example in the <code>loo</code> package from a model fit with 32 observations - here’s the first 3 of 1000 rows (i.e.&nbsp;the MCMC chain took 1000 draws):</p>
<div class="cell" data-hash="integrated_loo_cache/html/unnamed-chunk-2_e2701638a8a927b9bcee14f27de2e2dc">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">loo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">example_loglik_matrix</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>      [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9] [,10] [,11] [,12]
[1,] -2.37 -2.31 -2.34 -2.42 -2.31 -2.31 -2.68 -3.02 -2.59 -2.33 -2.32 -2.35
[2,] -2.12 -1.88 -2.05 -2.04 -1.86 -1.88 -2.93 -3.37 -2.39 -1.88 -1.92 -1.92
[3,] -2.24 -1.94 -2.17 -2.01 -1.89 -1.93 -3.01 -3.13 -2.29 -1.89 -1.98 -1.93
     [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24]
[1,] -2.31 -2.38 -2.33 -2.40 -3.30 -4.27 -2.60 -4.13 -2.39 -2.50 -2.63 -2.61
[2,] -1.86 -2.10 -1.92 -2.09 -4.31 -6.07 -2.32 -5.69 -2.21 -2.45 -2.81 -2.73
[3,] -1.89 -2.16 -1.95 -2.13 -4.25 -5.40 -2.15 -5.00 -2.35 -2.54 -2.91 -2.79
     [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32]
[1,] -2.55 -2.38 -2.36 -2.51 -2.78 -2.43 -2.54 -2.31
[2,] -2.36 -1.93 -1.90 -2.14 -3.25 -2.30 -2.56 -1.89
[3,] -2.30 -1.91 -1.89 -2.03 -3.38 -2.43 -2.65 -1.96</code></pre>
</div>
</div>
<p>LOO works by looking at the distributions of observation-wise log-likelihoods to assess how strongly each observation influences the overall fit. Low log-likelihood = strong influence on fit.</p>
<p>Observation-wise log-likelihood values can be unstable when a given observation strongly influences the posterior for a related parameter. Normally you’ll notice this when a Stan model gets through the MCMC stage without any warnings, but the Pareto k diagnostics come out badly when you try to run LOO and warning messages go off.</p>
<div class="cell" data-hash="integrated_loo_cache/html/unnamed-chunk-3_a7b885cc5f5c239e717fa32f7e518089">
<div class="cell-output-display">
<p><img src="https://andrewghazi.github.io/posts/int_loo/img/diagram.png" class="img-fluid" width="1179"></p>
</div>
</div>
<p>I’ve come across this twice:</p>
<ul>
<li>once when using <a href="https://github.com/biobakery/anpan/blob/f13ad4f2fe2251265f7d14fc66d1a313547e9fe5/R/pglmm_loo.R#L344">LOO on phylogenetic generalized linear mixed models</a> in my <a href="https://github.com/biobakery/anpan">anpan</a> package. Each leaf has its own “phylogenetic effect” parameter that is of course strongly influenced by the observed outcome for that leaf. (Side note: the model doesn’t overfit because there are <img src="https://latex.codecogs.com/png.latex?O(n%5E2)"> constraints on the parameters through a correlation matrix.) Aki Vehtari and Andrew Johnson helped me with this in <a href="https://discourse.mc-stan.org/t/integrated-loo-with-a-pglmm/27271">this thread on the Stan discourse forum</a>.</li>
<li>once when using subject-level Gaussian processes to model subject-wise outcome trajectories over time. A patient’s observation on a given day again strongly influenced the value of the estimated GP at that time point.</li>
</ul>
<p>Why are unstable log-likehood values problematic? Because it makes estimating that observation’s contribution to the model fit challenging. When the log-likelihood values are unstable, the importance ratios can have high or infinite variance <span class="citation" data-cites="vehtari_practical_2017">(Vehtari, Gelman, and Gabry 2017)</span>. The loo package automatically performs <em>Pareto smoothed</em> importance sampling to smooth the importance weights. This estimates a generalized Pareto distribution to the tail of each log-likelihood distribution. The k parameter of this Pareto distribution is used as a diagnostic to assess whether or not the leave-one-out distribution for the observation in question has been accurately characterized by the log-likelihood values from the MCMC fit.</p>
<p>The example below compares log-likelihood values for a single observation over two long MCMC chains evaluated with and without integration.</p>
<div class="cell" data-hash="integrated_loo_cache/html/unnamed-chunk-4_27e6cef21460f6a0b5747d4288ffb8db">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r fold-hide code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Result of the anpan tutorial example with n = 300</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/misc/output/result_with_int_n300.RData"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verbose =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4">loo_df_with_int_loo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> result_with_int<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>loo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pglmm_ll_df</span>
<span id="cb4-5"></span>
<span id="cb4-6">geryon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args2ge</span>(anpan_pglmm)</span>
<span id="cb4-7"></span>
<span id="cb4-8">meta_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> result_with_int<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>model_input</span>
<span id="cb4-9">tree_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tr</span>
<span id="cb4-10">outcome <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outcome"</span></span>
<span id="cb4-11">covariates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"covariate"</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;step through anpan_pglmm(), then use nonint_loo to get the loo values&gt;</span></span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># V This is pglmm_loo.R from anpan with some updates to drop the integration, the key distinction being the log_lik_i_j_gaussian function below.</span></span>
<span id="cb4-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/misc/R/pglmm_nonint_loo.R"</span>)</span>
<span id="cb4-17"></span>
<span id="cb4-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># THIS IS NOT INTEGRATED!!!</span></span>
<span id="cb4-19">log_lik_i_j_gaussian <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(effect_j,</span>
<span id="cb4-20">    mu_bar_j, sigma_bar_j, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># phylo term components</span></span>
<span id="cb4-21">    sigma_resid, yj, lm_term, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LM term components</span></span>
<span id="cb4-22">    offset_term) {</span>
<span id="cb4-23">    phylo_term <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(effect_j,</span>
<span id="cb4-24">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> mu_bar_j,</span>
<span id="cb4-25">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(sigma_bar_j),</span>
<span id="cb4-26">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb4-27">    )</span>
<span id="cb4-28"></span>
<span id="cb4-29">    model_mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(lm_term) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> effect_j</span>
<span id="cb4-30"></span>
<span id="cb4-31">    fit_term <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(</span>
<span id="cb4-32">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> yj,</span>
<span id="cb4-33">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> model_mean,</span>
<span id="cb4-34">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> sigma_resid,</span>
<span id="cb4-35">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb4-36">    )</span>
<span id="cb4-37"></span>
<span id="cb4-38">    res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> phylo_term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fit_term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> offset_term</span>
<span id="cb4-39"></span>
<span id="cb4-40">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(res)</span>
<span id="cb4-41">}</span>
<span id="cb4-42"></span>
<span id="cb4-43">ll_attempt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">safely_get_ll_mat</span>(draw_df,</span>
<span id="cb4-44">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">effect_means =</span> effect_means,</span>
<span id="cb4-45">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cor_mat =</span> cor_mat,</span>
<span id="cb4-46">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Lcov =</span> Lcov,</span>
<span id="cb4-47">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Xc =</span> Xc,</span>
<span id="cb4-48">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">offset_val =</span> data_list<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>offset_val,</span>
<span id="cb4-49">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Y =</span> data_list<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Y,</span>
<span id="cb4-50">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> family,</span>
<span id="cb4-51">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verbose =</span> verbose</span>
<span id="cb4-52">)</span>
<span id="cb4-53"></span>
<span id="cb4-54">ll_mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ll_attempt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>result</span>
<span id="cb4-55"></span>
<span id="cb4-56">nonint_loo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> loo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loo</span>(</span>
<span id="cb4-57">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> ll_mat,</span>
<span id="cb4-58">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_eff =</span> loo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">relative_eff</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(ll_mat),</span>
<span id="cb4-59">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chain_id =</span> draw_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.chain</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span>
<span id="cb4-60">    )</span>
<span id="cb4-61">)</span>
<span id="cb4-62"></span>
<span id="cb4-63">nonint_loo</span>
<span id="cb4-64"></span>
<span id="cb4-65">k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which.max</span>(nonint_loo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>diagnostics<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pareto_k) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 280</span></span>
<span id="cb4-66">nonint_loo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>diagnostics<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pareto_k[k] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 280</span></span>
<span id="cb4-67"></span>
<span id="cb4-68">int_comp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb4-69">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">with_integration =</span> loo_df_with_int_loo[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_lik["</span>, k, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span>)]],</span>
<span id="cb4-70">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">without =</span> ll_mat[, k]</span>
<span id="cb4-71">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>)</span>
<span id="cb4-72"></span>
<span id="cb4-73">int_comp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-74">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(value)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-75">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(</span>
<span id="cb4-76">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,</span>
<span id="cb4-77">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey25"</span></span>
<span id="cb4-78">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-79">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-80">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_rug</span>(</span>
<span id="cb4-81">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">333</span>,</span>
<span id="cb4-82">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey25"</span></span>
<span id="cb4-83">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-84">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_light</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-85">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb4-86">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey10"</span>),</span>
<span id="cb4-87">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey10"</span>),</span>
<span id="cb4-88">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey95"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey95"</span>),</span>
<span id="cb4-89">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey95"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey95"</span>),</span>
<span id="cb4-90">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey75"</span>)</span>
<span id="cb4-91">    )</span></code></pre></div>
</details>
</div>
<div class="cell" data-hash="integrated_loo_cache/html/unnamed-chunk-5_3336824f8c31a82ff1e696f4a08015a4">
<div class="cell-output-display">
<p><img src="https://andrewghazi.github.io/posts/int_loo/img/integral_comparison2.png" class="img-fluid" width="1050"></p>
</div>
</div>
<p>Ignoring the slight shift in the location of the distribution, you should note the much <em>heavier tail</em> without integration. The Pareto k diagnostic for this observation is 1.003 (“very bad”) without integration, so the LOO model comparison to some other model would not be feasible without integration.</p>
<p>High pareto k diagnostics = high or infinite variance loo distribution = inaccurate/misleading loo model comparison.</p>
<p>A way around this is “integrated” LOO. This involves computing the log-likehood in a different way, by <em>integrating out</em> the parameter causing the instability. <em>Usually</em> loo expects a variable called <code>log_lik</code> in the generated quantities block of the Stan model. This usually looks something like this:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode stan code-with-copy"><code class="sourceCode stan"><span id="cb5-1">generated quantitites {</span>
<span id="cb5-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[N] log_lik;</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:N) log_lik[i] = normal_lpdf(y[i] | mu, sigma);</span>
<span id="cb5-4">}</span></code></pre></div>
<p>This example is only for a very simple normal outcome model of course. There might also be regression coefficients, group-level parameters, etc involved in computing the log-likelihood, depending on the model.</p>
<p>By contrast, in the PGLMM example I flagged above, I had something analogous to this:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode stan code-with-copy"><code class="sourceCode stan"><span id="cb6-1">generated quantitites {</span>
<span id="cb6-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[N] log_lik;</span>
<span id="cb6-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:N) log_lik[i] = normal_lpdf(y[i] | observation_mu[i], sigma);</span>
<span id="cb6-4">}</span></code></pre></div>
<p>That <code>observation_mu[i]</code> is a problem. The observation-level mean parameter varies a lot and is only weakly influenced by the -i observations. <code>log_lik[i]</code> produced in this way will have extremely high or infinite variance.</p>
<p>The key to computing a stable <code>log_lik[i]</code> is to integrate out <code>observation_mu[i]</code>. You can work out the integral analytically if you have a nice Gaussian model, but I’m going to go over the more problematic case where you have to evaluate it numerically.</p>
</section>
<section id="identify-the-integral" class="level1">
<h1>Identify the integral</h1>
<p>It’s easy to say “integrate out the parameter”, but it’s harder to understand what that means. For me it was really difficult to even identify the integral that I needed to perform.</p>
<p>The key was to recall that the problematic parameter that I needed to integrate out depended on other higher level hyperparameters that I was also sampling in the MCMC chain. Elsewhere in the program I had a line to this effect:</p>
<pre><code>observation_mu ~ multi_normal(0, sigma^2*cor_mat);</code></pre>
<p>So when we need to integrate out <code>observation_mu[i]</code>, that means we need to integrate the log-likelihood not only over the outcome variable <code>Y</code> distributed according to <code>observation_mu[i]</code>, but also over the distribution of <code>observation_mu[i]</code> <em>conditioned on the other parameter values of that posterior draw</em>. In this case, that’s a multivariate normal conditioned on <code>observation_mu[-i]</code> and <code>sigma</code> at each iteration. We’ll cover how to calculate the conditional distribution later.</p>
</section>
<section id="simulated-pathological-example" class="level1">
<h1>Simulated pathological example</h1>
<p>I’ll work with a simplified version of the PGLMM example (no intercepts, covariates, etc). Here’s a tiny data simulation with sigma_phylo = 1 and sigma_resid = 0.5:</p>
<div class="cell" data-hash="integrated_loo_cache/html/unnamed-chunk-6_9f016c224d7ef0d1cd49c010679fccc2">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb8-2"></span>
<span id="cb8-3">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span></span>
<span id="cb8-4"></span>
<span id="cb8-5">cor_mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rtree</span>(n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-6">    ape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ladderize</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-7">    ape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vcv.phylo</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">corr =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9">sim_outcome <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> MASS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mvrnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb8-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n),</span>
<span id="cb8-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sigma =</span> cor_mat</span>
<span id="cb8-12">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-14"></span>
<span id="cb8-15">Lcov <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chol</span>(cor_mat) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>()</span></code></pre></div>
</details>
</div>
<p>This is the Stan model. It’s essentially just a continuous outcome with phylogenetically-distributed and normally-distributed error. The model needs to assess how much variation to ascribe to residual variance versus phylogenetic variance according to the pre-established phylogenetic structure (passed in as a Cholesky factor <code>Lcov</code>). I also include the <em>unstable</em> log-likelihood calculations in the generated quantities:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode stan code-with-copy"><code class="sourceCode stan"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">data</span> {</span>
<span id="cb9-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>&gt; N;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// total number of observations</span></span>
<span id="cb9-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[N] Y;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// response variable</span></span>
<span id="cb9-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">matrix</span>[N, N] Lcov;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// cholesky factor of known covariance matrix</span></span>
<span id="cb9-5">}</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">parameters</span> {</span>
<span id="cb9-8"> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; sigma_resid;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// residual variation</span></span>
<span id="cb9-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span>&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lower</span>=<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>&gt; sigma_phylo;  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// spread of phylo_effects</span></span>
<span id="cb9-10">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[N] std_phylo_effects;</span>
<span id="cb9-11">}</span>
<span id="cb9-12"></span>
<span id="cb9-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">transformed parameters</span> {</span>
<span id="cb9-14">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span>[N] <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">real</span> phylo_effects;</span>
<span id="cb9-15">  phylo_effects = to_array_1d(sigma_phylo * (Lcov * std_phylo_effects));</span>
<span id="cb9-16">}</span>
<span id="cb9-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">model</span> {</span>
<span id="cb9-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// likelihood</span></span>
<span id="cb9-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:N) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">target +=</span> normal_lpdf(Y[i] | phylo_effects[i], sigma_resid);</span>
<span id="cb9-20"></span>
<span id="cb9-21">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// priors</span></span>
<span id="cb9-22">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">target +=</span> std_normal_lpdf(sigma_resid) - normal_lccdf(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> | <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb9-23"></span>
<span id="cb9-24">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">target +=</span> std_normal_lpdf(sigma_phylo) - normal_lccdf(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> | <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>);</span>
<span id="cb9-25"></span>
<span id="cb9-26">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">target +=</span> std_normal_lpdf(std_phylo_effects);</span>
<span id="cb9-27">}</span>
<span id="cb9-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">generated quantities</span> {</span>
<span id="cb9-29">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">vector</span>[N] log_lik;</span>
<span id="cb9-30"></span>
<span id="cb9-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This will yield unstable log-likelihood values:</span></span>
<span id="cb9-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:N){</span>
<span id="cb9-33">    log_lik[i] = normal_lpdf(Y[i] | phylo_effects[i], sigma_resid);</span>
<span id="cb9-34">  }</span>
<span id="cb9-35">}</span></code></pre></div>
<p>Let’s run it:</p>
<div class="cell" data-hash="integrated_loo_cache/html/stanfit_f2ef98389e345beafb9eda7059645e8b">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">dir_prefix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interactive</span>()) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/miscR/qmd/"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb10-2"></span>
<span id="cb10-3">model_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(dir_prefix, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stan/simple_pglmm.stan"</span>)</span>
<span id="cb10-4">out_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(dir_prefix, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmdstanr_out/"</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmdstan_model</span>(model_path)</span>
<span id="cb10-7"></span>
<span id="cb10-8">data_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb10-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> n,</span>
<span id="cb10-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Y =</span> sim_outcome,</span>
<span id="cb10-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Lcov =</span> Lcov</span>
<span id="cb10-12">)</span>
<span id="cb10-13"></span>
<span id="cb10-14">pglmm_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> m<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(</span>
<span id="cb10-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_list,</span>
<span id="cb10-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">refresh =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interactive</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,</span>
<span id="cb10-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">parallel_chains =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb10-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_messages =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interactive</span>(),</span>
<span id="cb10-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show_exceptions =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interactive</span>(),</span>
<span id="cb10-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output_dir =</span> out_dir</span>
<span id="cb10-21">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: 7 of 4000 (0.0%) transitions ended with a divergence.
See https://mc-stan.org/misc/warnings for details.</code></pre>
</div>
</div>
<p>It samples fine, but the loo results are not good:</p>
<div class="cell" data-hash="integrated_loo_cache/html/naiveloo_1f931b29a33184310a87a79ffa3aa3aa">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">pglmm_fit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loo</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
Computed from 4000 by 150 log-likelihood matrix

         Estimate   SE
elpd_loo   -258.1  8.4
p_loo        61.4  5.0
looic       516.2 16.7
------
Monte Carlo SE of elpd_loo is NA.

Pareto k diagnostic values:
                         Count Pct.    Min. n_eff
(-Inf, 0.5]   (good)     64    42.7%   292       
 (0.5, 0.7]   (ok)       61    40.7%   111       
   (0.7, 1]   (bad)      24    16.0%   26        
   (1, Inf)   (very bad)  1     0.7%   32        
See help('pareto-k-diagnostic') for details.</code></pre>
</div>
</div>
<p>That’s a lot of bad diagnostics! We’ll fix this with integration.</p>
</section>
<section id="write-the-vectorized-integrand" class="level1">
<h1>Write the vectorized integrand</h1>
<p>We’re going to evaluate the integral in R. More on that later. For now, just know that we’ll need to write a vectorized R function that takes a vector of <code>phylo_effect[i]</code> values and returns the likelihood (<em>not log!</em>) for observation i using the parameter values from mcmc chain iteration j. Other arguments derived from other parameters at the interation are also required. Those other arguments include:</p>
<ul>
<li>The observed outcome value for the i-th leaf.</li>
<li>The <em>conditional</em> mean and standard deviation of the phylogenetic effect (conditioned on <code>phylo_effect[-i]</code>), which depend on the iteration’s <code>sigma_phylo</code> value.</li>
<li>the iteration’s <code>sigma_resid</code> value</li>
</ul>
<p>Here’s the function. It adds together the <code>target</code> terms that depend on <code>phylo_effect[i]</code>:</p>
<ul>
<li>the term from the phylogenetically correlated distribution of phylo effects</li>
<li>and the term from the fit to the observation <code>y[i]</code></li>
</ul>
<div class="cell" data-hash="integrated_loo_cache/html/unnamed-chunk-7_0bcadfcedd464c4146df4f4004ebe4fe">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">vec_integrand <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(phylo_effect_vec,</span>
<span id="cb15-2">    mu_bar_ij, sigma_bar_ij,</span>
<span id="cb15-3">    sigma_resid_j, yi,</span>
<span id="cb15-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) {</span>
<span id="cb15-5">    phylo_term <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(phylo_effect_vec,</span>
<span id="cb15-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> mu_bar_ij,</span>
<span id="cb15-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(sigma_bar_ij),</span>
<span id="cb15-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb15-9">    )</span>
<span id="cb15-10"></span>
<span id="cb15-11">    fit_term <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(</span>
<span id="cb15-12">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> yi,</span>
<span id="cb15-13">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> phylo_effect_vec,</span>
<span id="cb15-14">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> sigma_resid_j,</span>
<span id="cb15-15">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb15-16">    )</span>
<span id="cb15-17"></span>
<span id="cb15-18">    res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> phylo_term <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fit_term</span>
<span id="cb15-19"></span>
<span id="cb15-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>log) res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(res)</span>
<span id="cb15-21"></span>
<span id="cb15-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(res)</span>
<span id="cb15-23">}</span></code></pre></div>
</details>
</div>
<p><code>sigma_resid_j</code> and <code>yi</code> are fairly obvious. What about <code>mu_bar_ij</code> and <code>sigma_bar_ij</code>? Given the structure of the model, the mean and standard deviation of <code>phylo_effects[i]</code> are conditional on <code>phylo_effects[-i]</code> and <code>sigma_phylo[j]</code>. We’ll have to use <a href="https://en.wikipedia.org/wiki/Multivariate_normal_distribution#Conditional_distributions">the conditional distribution of a multivariate normal</a>:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbar%7B%5Cboldsymbol%7B%5Cmu%7D%7D%20=%20%5Cboldsymbol%7B%5Cmu%7D_1%20+%20%5Cboldsymbol%7B%5CSigma%7D_%7B12%7D%5Cboldsymbol%7B%5CSigma%7D_%7B22%7D%5E%7B-1%7D(%5Cboldsymbol%7Ba%7D%20-%20%5Cboldsymbol%7B%5Cmu%7D_2)"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbar%7B%5Cboldsymbol%7B%5CSigma%7D%7D%20=%20%5Cboldsymbol%7B%5CSigma%7D_%7B11%7D%20-%20%5Cboldsymbol%7B%5CSigma%7D_%7B12%7D%20%5Cboldsymbol%7B%5CSigma%7D_%7B22%7D%5E%7B-1%7D%20%5Cboldsymbol%7B%5CSigma%7D_%7B21%7D"></p>
<p>Here <img src="https://latex.codecogs.com/png.latex?%5Cbar%7B%5Cboldsymbol%7B%5Cmu%7D%7D"> is <code>mu_bar_ij</code> and <img src="https://latex.codecogs.com/png.latex?%5Cbar%7B%5Cboldsymbol%7B%5CSigma%7D%7D"> (which reduces to a 1x1 matrix) is <code>sigma_bar_ij</code>.</p>
<p>You can look up the 11 vs 12 vs 22 notation on the wikipedia link but basically <img src="https://latex.codecogs.com/png.latex?%5CSigma"> is rearranged to have the i-th element in the first row/column, then partitioned into the ith vs everything else.</p>
<p>The tricky part here is <img src="https://latex.codecogs.com/png.latex?%5CSigma_%7B22%7D%5E%7B-1%7D">, which is the inverse of an (n-1) x (n-1) matrix. We’ll do two things to make this computationally feasible in general:</p>
<ul>
<li>factor out <code>sigma_phylo</code> so we’re working in terms of the correlation matrix <img src="https://latex.codecogs.com/png.latex?%5COmega">, which doesn’t vary with posterior iteration</li>
<li>Use the Woodbury matrix identity to get <img src="https://latex.codecogs.com/png.latex?%5COmega_%7B22%7D%5E%7B-1%7D"> which together with <code>sigma_phylo[j]</code> can give you the</li>
</ul>
<p>For the sake of brevity I’m not going to use the Woodbury identity and instead just call <code>solve()</code> 150 times. That’s in the next section.</p>
</section>
<section id="get-the-inputs" class="level1">
<h1>Get the inputs</h1>
<p>This code chunk does a lot of the book-keeping to prepare lists of correlation matrix products and format the posterior draws into a nice <code>draw_list</code>.</p>
<div class="cell" data-hash="integrated_loo_cache/html/inverses_9ca3116c3f8fcc117bfdba06653dbbf4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">get_corr_mat_minus_i_inv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(i, cor_mat, n) {</span>
<span id="cb16-2">    cor_mat[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>()</span>
<span id="cb16-4">}</span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># precompute lists of corr_11, corr_12, corr_22_inv, and corr_12 * corr_22_inv</span></span>
<span id="cb16-7">corr_minus_i_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n,</span>
<span id="cb16-8">    get_corr_mat_minus_i_inv,</span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cor_mat =</span> cor_mat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n</span>
<span id="cb16-10">)</span>
<span id="cb16-11"></span>
<span id="cb16-12">corr_12_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(</span>
<span id="cb16-13">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n,</span>
<span id="cb16-14">    \(i) cor_mat[</span>
<span id="cb16-15">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(i, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n)[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i]),</span>
<span id="cb16-16">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(i, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n)[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i])</span>
<span id="cb16-17">    ][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drop =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>]</span>
<span id="cb16-18">)</span>
<span id="cb16-19"></span>
<span id="cb16-20">corr_11 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(cor_mat)</span>
<span id="cb16-21"></span>
<span id="cb16-22">corr12xcorr22_inv_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(</span>
<span id="cb16-23">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n,</span>
<span id="cb16-24">    \(i) corr_12_list[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> corr_minus_i_list[[i]]</span>
<span id="cb16-25">)</span>
<span id="cb16-26"></span>
<span id="cb16-27">corr_11_i_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(</span>
<span id="cb16-28">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n,</span>
<span id="cb16-29">    \(i) corr_11[i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span></span>
<span id="cb16-30">        corr12xcorr22_inv_list[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(corr_12_list[[i]])</span>
<span id="cb16-31">)</span>
<span id="cb16-32"></span>
<span id="cb16-33">get_sigma_bar_ij <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(sigma_phylo, corr_minus_i_list,</span>
<span id="cb16-34">    corr_12_list) {</span>
<span id="cb16-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns a vector</span></span>
<span id="cb16-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(sigma_phylo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> corr_11_i_list)</span>
<span id="cb16-37">}</span>
<span id="cb16-38"></span>
<span id="cb16-39">get_mu_bar_ij <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a) {</span>
<span id="cb16-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mu_1 and mu_2 are 0</span></span>
<span id="cb16-41">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(</span>
<span id="cb16-42">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n,</span>
<span id="cb16-43">        \(i) corr12xcorr22_inv_list[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(a[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-44">    )</span>
<span id="cb16-45">}</span>
<span id="cb16-46"></span>
<span id="cb16-47">draw_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pglmm_fit<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draws</span>(</span>
<span id="cb16-48">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb16-49">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phylo_effects"</span>,</span>
<span id="cb16-50">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma_resid"</span>,</span>
<span id="cb16-51">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigma_phylo"</span></span>
<span id="cb16-52">    ),</span>
<span id="cb16-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span></span>
<span id="cb16-54">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-55">    tidybayes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_draws</span>(</span>
<span id="cb16-56">        sigma_resid, sigma_phylo,</span>
<span id="cb16-57">        phylo_effects[i]</span>
<span id="cb16-58">    )</span>
<span id="cb16-59"></span>
<span id="cb16-60">draw_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> draw_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-61">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">phylo_effect_vectors =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(</span>
<span id="cb16-62">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>,</span>
<span id="cb16-63">        \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(draw_df[x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n])</span>
<span id="cb16-64">    )) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-65">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matches</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phylo_effects"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-66">    dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_split</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.draw</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># one list element per draw</span></span></code></pre></div>
</details>
</div>
</section>
<section id="evaluate-the-integral" class="level1">
<h1>Evaluate the integral</h1>
<p>So using one draw from the <code>draw_list</code> we prepared in the previous section, along with the functions <code>get_mu_bar_ij()</code> and <code>get_sigma_bar_ij()</code>, we can get the set of <code>mu_bar_ij</code> and <code>sigma_bar_ij</code> for each observation for this one draw:</p>
<div class="cell" data-hash="integrated_loo_cache/html/unnamed-chunk-8_ea9ce275ca7414e5d5b4a3a088d4bd4f">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">mu_bar_i1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> draw_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>phylo_effect_vectors[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_mu_bar_ij</span>()</span>
<span id="cb17-2">sigma_bar_i1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> draw_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sigma_phylo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sigma_bar_ij</span>(</span>
<span id="cb17-3">    corr_minus_i_list,</span>
<span id="cb17-4">    corr_12_list</span>
<span id="cb17-5">)</span></code></pre></div>
</details>
</div>
<section id="integrand-at-one-point-for-one-observation-in-one-draw" class="level2">
<h2 class="anchored" data-anchor-id="integrand-at-one-point-for-one-observation-in-one-draw">Integrand at one point for one observation in one draw</h2>
<p>Let’s evaluate the integrand for an (arbitrarily selected) phylogenetic effect of 0.333 for the fifth observation on the first draw:</p>
<div class="cell" data-hash="integrated_loo_cache/html/unnamed-chunk-9_2535432966cd3aab92b48f2ff34e1a7c">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vec_integrand</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.333</span>,</span>
<span id="cb18-2">    mu_bar_i1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],</span>
<span id="cb18-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma_bar_ij =</span> sigma_bar_i1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],</span>
<span id="cb18-4">    draw_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sigma_resid, data_list<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb18-5">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>      t136 
0.02345266 </code></pre>
</div>
</div>
<p>A reasonable-looking number, hooray!</p>
</section>
<section id="integral-for-one-observation-in-one-draw" class="level2">
<h2 class="anchored" data-anchor-id="integral-for-one-observation-in-one-draw">Integral for one observation in one draw</h2>
<p>Instead of just evaluating at an arbitrary point, let’s integrate it numerically. <code>vec_integrand()</code> as written actually has an analytic integral (the sum of two parabolas is just another parabola, so you can work out <a href="https://www.wolframalpha.com/input?i=integrate+exp%28a*x%5E2+%2B+b*x+%2B+c%29+from+-inf+to+inf">an expression for the integral</a>), but I’m going to do it numerically for the more generic case (which I also do in anpan for logistic PGLMM LOO).</p>
<p>In the roaches example they use Stan’s built-in <code>integrate_1d()</code> function. While it’s nice to keep the log-likelihood calculation in the Stan program, the interface is unwieldy to me. You have to pass in ALL of the secondary real-valued arguments into the integrand function in a single argument, which is tricky when that includes many irregularly structured components. Same goes for integers. To me, doing the integral after the fact in R is much simpler. You can then hand the log-likelihood matrix directly to <code>loo::loo()</code>.</p>
<p>The R function <code>stats::integrate()</code> uses adaptive quadrature to numerically integrate functions. I don’t know much about how it works, but it internally calls C code for the heavy lifting, so it’s pretty fast. It would be interesting to benchmark it against Stan’s <code>integrate_1d()</code>.</p>
<p>Anyway, you just hand <code>stats::integrate()</code> the function, the integration range, and other needed arguments.</p>
<div class="cell" data-hash="integrated_loo_cache/html/unnamed-chunk-10_832b194957314d7760a763a9953c1299">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integrate</span>(vec_integrand,</span>
<span id="cb20-2">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>,</span>
<span id="cb20-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu_bar_ij =</span> mu_bar_i1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],</span>
<span id="cb20-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma_bar_ij =</span> sigma_bar_i1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],</span>
<span id="cb20-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma_resid =</span> draw_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sigma_resid,</span>
<span id="cb20-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yi =</span> data_list<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb20-7">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>0.1941623 with absolute error &lt; 3.8e-05</code></pre>
</div>
</div>
<p>Another reasonable number, hooray!</p>
</section>
<section id="integral-for-all-observations-in-one-draw" class="level2">
<h2 class="anchored" data-anchor-id="integral-for-all-observations-in-one-draw">Integral for all observations in one draw</h2>
<p>Going further, let’s write a couple functions to evaluate the integral for all observations in a given draw:</p>
<div class="cell" data-hash="integrated_loo_cache/html/unnamed-chunk-11_1671498397dd2a584fa05713e10cdac9">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">integrate_one_obs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(mu_bar_ij, sigma_bar_ij, Y,</span>
<span id="cb22-2">    sigma_resid) {</span>
<span id="cb22-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integrate</span>(</span>
<span id="cb22-4">        vec_integrand,</span>
<span id="cb22-5">        <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>,</span>
<span id="cb22-6">        mu_bar_ij, sigma_bar_ij,</span>
<span id="cb22-7">        sigma_resid, Y</span>
<span id="cb22-8">    )<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value</span>
<span id="cb22-9">}</span>
<span id="cb22-10"></span>
<span id="cb22-11">integrate_all_obs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(draw_j) {</span>
<span id="cb22-12">    mu_bar_ij <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> draw_j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>phylo_effect_vectors[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_mu_bar_ij</span>()</span>
<span id="cb22-13">    sigma_bar_ij <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> draw_j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sigma_phylo <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sigma_bar_ij</span>(</span>
<span id="cb22-14">        corr_minus_i_list,</span>
<span id="cb22-15">        corr_12_list</span>
<span id="cb22-16">    )</span>
<span id="cb22-17"></span>
<span id="cb22-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mapply</span>(integrate_one_obs,</span>
<span id="cb22-19">        mu_bar_ij, sigma_bar_ij, data_list<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Y,</span>
<span id="cb22-20">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma_resid =</span> draw_j<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sigma_resid</span>
<span id="cb22-21">    )</span>
<span id="cb22-22">}</span>
<span id="cb22-23"></span>
<span id="cb22-24"></span>
<span id="cb22-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>({</span>
<span id="cb22-26">    draw42_integrals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integrate_all_obs</span>(draw_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>]])</span>
<span id="cb22-27">})</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
   0.02    0.00    0.02 </code></pre>
</div>
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">draw42_integrals <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>  [1] 0.14 0.24 0.27 0.27 0.21 0.23 0.19 0.14 0.11 0.29 0.29 0.30 0.31 0.29 0.29
 [16] 0.24 0.09 0.25 0.05 0.34 0.33 0.23 0.18 0.21 0.33 0.34 0.30 0.03 0.30 0.20
 [31] 0.06 0.27 0.10 0.22 0.15 0.27 0.24 0.34 0.21 0.28 0.14 0.30 0.33 0.29 0.35
 [46] 0.31 0.20 0.25 0.28 0.28 0.29 0.33 0.31 0.00 0.04 0.34 0.28 0.33 0.32 0.33
 [61] 0.06 0.12 0.06 0.29 0.23 0.27 0.31 0.28 0.01 0.29 0.29 0.23 0.31 0.22 0.23
 [76] 0.32 0.27 0.28 0.34 0.33 0.29 0.13 0.26 0.22 0.34 0.22 0.34 0.27 0.10 0.28
 [91] 0.13 0.26 0.23 0.32 0.33 0.29 0.32 0.20 0.33 0.31 0.28 0.03 0.29 0.29 0.31
[106] 0.07 0.39 0.20 0.11 0.31 0.28 0.30 0.30 0.27 0.09 0.31 0.16 0.03 0.26 0.12
[121] 0.16 0.12 0.30 0.12 0.28 0.16 0.22 0.34 0.07 0.32 0.21 0.30 0.16 0.08 0.29
[136] 0.07 0.19 0.27 0.26 0.31 0.33 0.32 0.07 0.29 0.30 0.15 0.09 0.10 0.25 0.16</code></pre>
</div>
</div>
<p>Fast, reasonable likelihoods!</p>
</section>
<section id="integral-for-all-observations-for-one-draw" class="level2">
<h2 class="anchored" data-anchor-id="integral-for-all-observations-for-one-draw">Integral for all observations, for one draw</h2>
<p>Finally, let’s apply it to every posterior draw. I just remembered that <code>purrr::map()</code> recently introduced a <code>.progress</code> argument, let’s use it. <code>purrr</code> is sick.</p>
<div class="cell" data-hash="integrated_loo_cache/html/_555e06ce18a628f6137f720ff04c1059">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">lik_mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(draw_list,</span>
<span id="cb26-2">    integrate_all_obs,</span>
<span id="cb26-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.progress =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interactive</span>()</span>
<span id="cb26-4">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb26-5">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reduce</span>(rbind)</span></code></pre></div>
</details>
</div>
<p>It only takes a minute on my laptop, but of course with larger datasets / more complicated models it can slow down a bit. That <code>purrr::map()</code> call is embarassingly parallelizable.</p>
<p>Finally we can see the loo results with the stable Pareto k diagnostics. We feed in the chain ID numbers so that loo is aware of the relative effective sample sizes:</p>
<div class="cell" data-hash="integrated_loo_cache/html/unnamed-chunk-12_24c38faff93c98006050f379e040e3ed">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">loo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loo</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(lik_mat),</span>
<span id="cb27-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">r_eff =</span> loo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">relative_eff</span>(lik_mat,</span>
<span id="cb27-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chain_id =</span> draw_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.chain</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span>
<span id="cb27-4">    )</span>
<span id="cb27-5">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: Some Pareto k diagnostic values are slightly high. See help('pareto-k-diagnostic') for details.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
Computed from 4000 by 150 log-likelihood matrix

         Estimate   SE
elpd_loo   -259.6  7.8
p_loo        16.5  1.7
looic       519.1 15.6
------
Monte Carlo SE of elpd_loo is 0.1.

Pareto k diagnostic values:
                         Count Pct.    Min. n_eff
(-Inf, 0.5]   (good)     149   99.3%   852       
 (0.5, 0.7]   (ok)         1    0.7%   1762      
   (0.7, 1]   (bad)        0    0.0%   &lt;NA&gt;      
   (1, Inf)   (very bad)   0    0.0%   &lt;NA&gt;      

All Pareto k estimates are ok (k &lt; 0.7).
See help('pareto-k-diagnostic') for details.</code></pre>
</div>
</div>
<p>Okay, so there may be one or two that are just “ok”, but way, way better and totally usable!</p>
</section>
</section>
<section id="speed-concerns" class="level1">
<h1>Speed concerns</h1>
<p>Integrated LOO involves performing a numerical integral for every observation at every posterior iteration. That’s a lot of integrals. Performance can be a concern. Techniques that I’ve found to be helpful:</p>
<ul>
<li>Parallelization over posterior iterations, of course.</li>
<li>Pre-computing conditional covariance matrices</li>
<li>Linear algebra identities like the <a href="https://en.wikipedia.org/wiki/Woodbury_matrix_identity">Woodbury matrix identity</a></li>
</ul>
<p>In the PGLMM example, I needed leave-one-out conditional covariance matrices for each observation on trees that had up to ~3000 leaves. Computing a conditional covariance matrix involves inverting the sub-block of the covariance matrix that you’re conditioning on. Inverting a 2999 x 2999 matrix once isn’t so bad, inverting 3000 2999 x 2999 matrices 4000 times is. There were two key points to solving this (the latter of which came from <a href="https://stats.stackexchange.com/questions/592591/efficiently-calculating-leave-one-out-conditional-multivariate-normal-distributi">help on StackExchange</a>): 1) get the covariance matrix at each iteration by simply multiplying the iteration’s variance parameter times a precomputed conditional correlation matrix that didn’t change with iteration. That removes the factor of 4000. And 2) precompute the conditional correlation matrix with the Woodbury matrix identity from the inverse correlation matrix I already had before the MCMC fit. A leave-one-out operation can be encoded as a rank two update, so that took me from 3000 2999x2999 inverses to 3000 2x2 inverses. Nice. The Woodbury matrix identity does introduce some numerical inaccuracy which necessitates some additional checks (beyond being huge, the phylogenetic trees can also yield poorly conditioned correlation matrices), but it’s generally worth it.</p>
</section>
<section id="numerical-accuracy-concerns" class="level1">
<h1>Numerical accuracy concerns</h1>
<p>In tension with the speed concerns we also have numerical accuracy concerns. The integral has to be evaluated on the <em>identity</em> scale, <em>not the log scale</em>. It has to be <img src="https://latex.codecogs.com/png.latex?log(%5Cint%7Bexp(loglik)d%5Ctheta%7D)">. <img src="https://latex.codecogs.com/png.latex?%5Cint%7Bloglik%20d%5Ctheta%7D"> won’t work. This can cause over/underflow issues depending on the model / data.</p>
<p>This post is already too long, so I won’t demonstrate it here, but the key to overcoming this is a technique akin to the <a href="https://en.wikipedia.org/wiki/LogSumExp">LogSumExp()</a> trick, kind of like LogIntExp() or something. Optimize the integrand, then use the optimal value as an offset when integrating, then subtract the contribution of that constant off of the integral.</p>
<p>Also of concern are the integration limits. Sometimes, for very low values of <code>sigma_phylo</code> in this case, the integrand function can be extremely sharp. To <code>stats::integrate()</code> it will look like a flat function at 0, so you’ll get 0. <code>anpan</code> uses some tricks to optimize the integrand, look at the curvature, then go out a reasonable number of SDs in order to capture the body of the spike. Different sorts of problems can also occur if the integrand is extremely flat and you chose a poor offset value.</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent">
<div id="ref-vehtari_practical_2017" class="csl-entry">
Vehtari, Aki, Andrew Gelman, and Jonah Gabry. 2017. <span>“Practical <span>Bayesian</span> Model Evaluation Using Leave-One-Out Cross-Validation and <span>WAIC</span>.”</span> <em>Statistics and Computing</em> 27 (5): 1413–32. <a href="https://doi.org/10.1007/s11222-016-9696-4">https://doi.org/10.1007/s11222-016-9696-4</a>.
</div>
<div id="ref-vehtari_bayesian" class="csl-entry">
Vehtari, Aki, Tommi Mononen, Ville Tolvanen, Tuomas Sivula, and Ole Winther. 2016. <span>“Bayesian Leave-One-Out Cross-Validation Approximations for Gaussian Latent Variable Models.”</span> <em>Journal of Machine Learning Research</em> 17 (103): 1–38. <a href="http://jmlr.org/papers/v17/14-540.html">http://jmlr.org/papers/v17/14-540.html</a>.
</div>
</div></section></div> ]]></description>
  <category>R</category>
  <category>Stan</category>
  <category>loo</category>
  <guid>https://andrewghazi.github.io/posts/int_loo/integrated_loo.html</guid>
  <pubDate>Fri, 22 Sep 2023 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
