[
  {
    "objectID": "posts/col_pal/col_pal.html",
    "href": "posts/col_pal/col_pal.html",
    "title": "Effective color palettes",
    "section": "",
    "text": "This post reviews how and when I use my favorite color palettes in R.\nCode\nlibrary(tidyverse); theme_set(theme_light())\n\npar(bg = \"#F2F2F2\",\n    mar = c(1,4.5,.5,.5)+.1,\n    col.lab = \"#222222\")\n\npals::pal.bands(pals::viridis, \n                pals::cividis,\n                pals::coolwarm,\n                pals::cols25(n = 25),\n                labels = c(\"General continuous\", \n                           'Centered on zero,\\ndiverging to\\n two categories',\n                           'Centered on zero,\\ndiverging to\\n\"low\" and \"high\"',\n                           \"Categorical\"),\n                n = 250)\n\n\n\n\n\nCode\npreview_palette = function(pal, n = 250) {\n  par(bg = rgb(0,0,0,0),\n    mar = c(0,0,0,0),\n    col.lab = \"#222222\")\n  \n  pals::pal.bands(pal, n = n, labels = \"\")\n}\nThese are all easily available using the excellent pals package by Kevin Wright, whose vignette is great for scrolling through to find case-specific palettes and the pal.bands() function I use throughout this post to preview palettes."
  },
  {
    "objectID": "posts/col_pal/col_pal.html#viridis",
    "href": "posts/col_pal/col_pal.html#viridis",
    "title": "Effective color palettes",
    "section": "Viridis",
    "text": "Viridis\n\n\nCode\npreview_palette(pals::viridis)\n\n\n\n\n\nEasy to use (see ?ggplot2::scale_color_viridis_c), visually appealing, and apparently pretty good in terms of accessbility. My only qualm with Viridis (sometimes) is that it ends on bright yellow, which can sometimes lead to the deadly sin of ‚Äúyellow dots on a white background‚Äù:\n\n\nCode\np = ggplot(mtcars, aes(disp, mpg)) +\n  geom_point(aes(color = drat))\n\np + scale_color_viridis_c()\n\n\n\n\n\nThankfully, this can be rectified by setting end = .92 to end the scale earlier:\n\n\nCode\np + scale_color_viridis_c(end = .92)\n\n\n\n\n\nOr with a dark background:\n\n\nCode\np + scale_color_viridis_c() + theme_dark()"
  },
  {
    "objectID": "posts/col_pal/col_pal.html#cividis",
    "href": "posts/col_pal/col_pal.html#cividis",
    "title": "Effective color palettes",
    "section": "Cividis",
    "text": "Cividis\n\n\nCode\npreview_palette(pals::cividis)\n\n\n\n\n\nSome recommend this as the go-to general purpose color palette for continuous variables, and I think it‚Äôs okay in that role, but my eyes strongly latch onto the grey ‚Äúcenter‚Äù, which sometimes isn‚Äôt helpful when the center of the data‚Äôs range doesn‚Äôt have any special meaning over any other quantile. That said, it‚Äôs optimized for improved accessibility over viridis. I like to use when a central value diverges into two categories e.g.¬†a map of where foos versus bars live."
  },
  {
    "objectID": "posts/col_pal/col_pal.html#coolwarm",
    "href": "posts/col_pal/col_pal.html#coolwarm",
    "title": "Effective color palettes",
    "section": "coolwarm",
    "text": "coolwarm\n\n\nCode\npreview_palette(pals::coolwarm)\n\n\n\n\n\nSimilar sort of use-case as cividis for me, but particularly when the two categories have a natural ‚Äúhigh‚Äù versus ‚Äúlow‚Äù interpretation (rather than two unordered categories) e.g.¬†a map of temperatures."
  },
  {
    "objectID": "posts/col_pal/col_pal.html#cols25",
    "href": "posts/col_pal/col_pal.html#cols25",
    "title": "Effective color palettes",
    "section": "cols25",
    "text": "cols25\n\n\nCode\npreview_palette(pals::cols25, n = 10)\n\n\n\n\n\nI like that the first two colors are pleasing shades of red and blue, and it‚Äôs easy enough to remember how to use."
  },
  {
    "objectID": "posts/col_pal/col_pal.html#parula",
    "href": "posts/col_pal/col_pal.html#parula",
    "title": "Effective color palettes",
    "section": "Parula",
    "text": "Parula\n\n\nCode\npreview_palette(pals::parula)\n\n\n\n\n\nIn my opinion, this is the most visually appealing continuous color scale out there, even over Viridis. Just look at it:\n\n\nCode\nbimod_dat = rbind(MASS::mvrnorm(n = 4000, mu = c(-1, 1), Sigma = diag(2)), \n                  MASS::mvrnorm(n = 4000, mu = c( 1,-1), Sigma = diag(2)))  |&gt; \n  as.data.frame() |&gt; \n  rename(x = V1, y = V2) \n\nbimod_plot = bimod_dat |&gt; \n  ggplot(aes(x,y)) + \n  geom_hex()\n\nbimod_plot + scale_fill_gradientn(colours = pals::parula(n = 200), guide = \"colorbar\")\n\n\n\n\n\nThe downside is that I can never immediately remember the syntax for dropping a custom continuous color palette into ggplot. You have to use scale_*_gradientn(colors = pals::parula(n = 100)). This also involves setting a discrete number of colors for the values to get binned into, which seems reasonable at first, but can sometimes come back to bite you as visually-apparent aliasing if you don‚Äôt set n high enough. Setting it too high can create visual artifacts. Finally, this requires a dependency on pals, which isn‚Äôt always desirable during package development."
  },
  {
    "objectID": "posts/ezpzmcmcpcpca/ezpzmcmcpcpca.html",
    "href": "posts/ezpzmcmcpcpca/ezpzmcmcpcpca.html",
    "title": "ezpzmcmcpcpca package",
    "section": "",
    "text": "I made an R implementation of probabilistic contrastive principal components analysis, aka PCPCA. As the name implies, this method allows you to probabilistically infer contrastive axes between experimental groups. ‚ÄúContrastive‚Äù axes are directions in high dimensional space that help distinguish specified groups, rather than overall variation. More information on GitHub.\nR implementation of PCPCA. PCPCA is the work of Didong Li, Andrew Jones, and Barbara Engelhardt. Original manuscript here: https://arxiv.org/abs/2012.07977 and original Python implementation here: https://github.com/andrewcharlesjones/pcpca"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html",
    "href": "posts/tidy_dt/tidy_dt_translation.html",
    "title": "Tidyverse/data.table translations",
    "section": "",
    "text": "A list of common tidyverse/data.table commands that do (roughly) the same thing so that you can compare the syntax. Some opinions included."
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#tidyverse",
    "href": "posts/tidy_dt/tidy_dt_translation.html#tidyverse",
    "title": "Tidyverse/data.table translations",
    "section": "tidyverse",
    "text": "tidyverse\n\nPros\n\neasy to read\neasy to write\napproachable to beginners\nmany useful convenience functions\ntibble pretty print\n\n\n\nCons\n\nrelatively slow (though improving over time)\ncan be verbose\nbig dependency footprint\nmore prone to interface changes\ntypical usage with nonstandard evaluation doesn‚Äôt play nicely with CRAN"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#data.table",
    "href": "posts/tidy_dt/tidy_dt_translation.html#data.table",
    "title": "Tidyverse/data.table translations",
    "section": "data.table",
    "text": "data.table\n\nPros\n\ninsane performance üî•\nconcise\nno dependencies other than R itself\nsome built in parallelization (but not on Mac without some pain)\nsome low-level features tidyverse probably won‚Äôt ever have (eg keys)\n\n\n\nCons\n\nlooks like a mish-mash of punctuation 6 months after the fact (this is gradually improving)\ndocumentation can be arcane\nmodify by reference defies the general R convention of copy on modify\nlist columns don‚Äôt print as nicely"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#tidy",
    "href": "posts/tidy_dt/tidy_dt_translation.html#tidy",
    "title": "Tidyverse/data.table translations",
    "section": "tidy",
    "text": "tidy\n\n\nCode\nmt_tbl |&gt; mutate(disp_per_cyl = disp / cyl)\n\n\n# A tibble: 32 √ó 13\n   model         mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2 Mazda RX4 ‚Ä¶  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4 Hornet 4 D‚Ä¶  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5 Hornet Spo‚Ä¶  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ‚Ñπ 22 more rows\n# ‚Ñπ 1 more variable: disp_per_cyl &lt;dbl&gt;"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#data.table-1",
    "href": "posts/tidy_dt/tidy_dt_translation.html#data.table-1",
    "title": "Tidyverse/data.table translations",
    "section": "data.table",
    "text": "data.table\n\n\nCode\nmt_dt[, disp_per_cyl := disp/cyl]\n\n\nBy default assignment by reference operations don‚Äôt print anything. You can tack an empty [] onto the end of that operation to get it to print.\nThe data.table walrus operator / let() assign by reference, so the disp_per_cyl column is added to mt_dt without using &lt;-. Let‚Äôs delete it.\n\n\nCode\nmt_dt[, disp_per_cyl := NULL]"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#multiple-columns",
    "href": "posts/tidy_dt/tidy_dt_translation.html#multiple-columns",
    "title": "Tidyverse/data.table translations",
    "section": "Multiple columns",
    "text": "Multiple columns\n\n\nCode\nmt_tbl |&gt; mutate(disp_per_cyl = disp / cyl,\n                 hp_per_disp  = hp / disp)\n\n\n# A tibble: 32 √ó 14\n   model         mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2 Mazda RX4 ‚Ä¶  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4 Hornet 4 D‚Ä¶  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5 Hornet Spo‚Ä¶  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ‚Ñπ 22 more rows\n# ‚Ñπ 2 more variables: disp_per_cyl &lt;dbl&gt;, hp_per_disp &lt;dbl&gt;\n\n\nversus\n\n\nCode\nmt_dt[, `:=`(disp_per_cyl = disp / cyl,\n             hp_per_disp  = hp / disp)]\n\n\nCleanup:\n\n\nCode\nmt_dt[,let(disp_per_cyl = NULL,\n           hp_per_disp  = NULL)]"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#tidy-1",
    "href": "posts/tidy_dt/tidy_dt_translation.html#tidy-1",
    "title": "Tidyverse/data.table translations",
    "section": "tidy",
    "text": "tidy\n\n\nCode\nmt_tbl |&gt; filter(disp &gt; 450)\n\n\n# A tibble: 2 √ó 12\n  model          mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n  &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Cadillac Fl‚Ä¶  10.4     8   472   205  2.93  5.25  18.0     0     0     3     4\n2 Lincoln Con‚Ä¶  10.4     8   460   215  3     5.42  17.8     0     0     3     4"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#data.table-2",
    "href": "posts/tidy_dt/tidy_dt_translation.html#data.table-2",
    "title": "Tidyverse/data.table translations",
    "section": "data.table",
    "text": "data.table\n\n\nCode\nmt_dt[disp &gt; 450]\n\n\n                 model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am\n                &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;\n1:  Cadillac Fleetwood  10.4     8   472   205  2.93 5.250 17.98     0     0\n2: Lincoln Continental  10.4     8   460   215  3.00 5.424 17.82     0     0\n    gear  carb\n   &lt;num&gt; &lt;num&gt;\n1:     3     4\n2:     3     4\n\n\nIf the condition is a pre-existing column, enclose it in parentheses:\n\n\nCode\nmt_dt[, big := disp &gt; 450]\n\nmt_dt[(big)]\n\n\n                 model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am\n                &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;\n1:  Cadillac Fleetwood  10.4     8   472   205  2.93 5.250 17.98     0     0\n2: Lincoln Continental  10.4     8   460   215  3.00 5.424 17.82     0     0\n    gear  carb    big\n   &lt;num&gt; &lt;num&gt; &lt;lgcl&gt;\n1:     3     4   TRUE\n2:     3     4   TRUE\n\n\nCode\nmt_dt[, big := NULL]"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#tidy-2",
    "href": "posts/tidy_dt/tidy_dt_translation.html#tidy-2",
    "title": "Tidyverse/data.table translations",
    "section": "tidy",
    "text": "tidy\nThey recently introduced .by arguments in dplyr 1.1.0, which to me is much cleaner than a separate call to group_by()\n\n\nCode\nmt_tbl |&gt; \n  summarise(avg_mpg = mean(mpg), .by = cyl)\n\n\n# A tibble: 3 √ó 2\n    cyl avg_mpg\n  &lt;dbl&gt;   &lt;dbl&gt;\n1     6    19.7\n2     4    26.7\n3     8    15.1"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#data.table-3",
    "href": "posts/tidy_dt/tidy_dt_translation.html#data.table-3",
    "title": "Tidyverse/data.table translations",
    "section": "data.table",
    "text": "data.table\nWe use the data.table .() alias for list()\n\n\nCode\nmt_dt[, .(avg_mpg = mean(mpg)), by = cyl]\n\n\n     cyl  avg_mpg\n   &lt;num&gt;    &lt;num&gt;\n1:     6 19.74286\n2:     4 26.66364\n3:     8 15.10000"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#tidy-3",
    "href": "posts/tidy_dt/tidy_dt_translation.html#tidy-3",
    "title": "Tidyverse/data.table translations",
    "section": "tidy",
    "text": "tidy\n\n\nCode\nmt_tbl |&gt; arrange(mpg)\n\n\n# A tibble: 32 √ó 12\n   model         mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Cadillac F‚Ä¶  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4\n 2 Lincoln Co‚Ä¶  10.4     8  460    215  3     5.42  17.8     0     0     3     4\n 3 Camaro Z28   13.3     8  350    245  3.73  3.84  15.4     0     0     3     4\n 4 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 5 Chrysler I‚Ä¶  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4\n 6 Maserati B‚Ä¶  15       8  301    335  3.54  3.57  14.6     0     1     5     8\n 7 Merc 450SLC  15.2     8  276.   180  3.07  3.78  18       0     0     3     3\n 8 AMC Javelin  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2\n 9 Dodge Chal‚Ä¶  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2\n10 Ford Pante‚Ä¶  15.8     8  351    264  4.22  3.17  14.5     0     1     5     4\n# ‚Ñπ 22 more rows"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#data.table-4",
    "href": "posts/tidy_dt/tidy_dt_translation.html#data.table-4",
    "title": "Tidyverse/data.table translations",
    "section": "data.table",
    "text": "data.table\n\n\nCode\nmt_dt[order(mpg)] |&gt; head()\n\n\n                 model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am\n                &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;\n1:  Cadillac Fleetwood  10.4     8   472   205  2.93 5.250 17.98     0     0\n2: Lincoln Continental  10.4     8   460   215  3.00 5.424 17.82     0     0\n3:          Camaro Z28  13.3     8   350   245  3.73 3.840 15.41     0     0\n4:          Duster 360  14.3     8   360   245  3.21 3.570 15.84     0     0\n5:   Chrysler Imperial  14.7     8   440   230  3.23 5.345 17.42     0     0\n6:       Maserati Bora  15.0     8   301   335  3.54 3.570 14.60     0     1\n    gear  carb\n   &lt;num&gt; &lt;num&gt;\n1:     3     4\n2:     3     4\n3:     3     4\n4:     3     4\n5:     3     4\n6:     5     8\n\n\nSee also ?data.table::setkey() and ?data.table::setorder()"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#inner",
    "href": "posts/tidy_dt/tidy_dt_translation.html#inner",
    "title": "Tidyverse/data.table translations",
    "section": "Inner",
    "text": "Inner\n\n\nCode\ninner_join(x,y, by = 'grp') \nY[X, on = 'grp', nomatch = 0]"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#left",
    "href": "posts/tidy_dt/tidy_dt_translation.html#left",
    "title": "Tidyverse/data.table translations",
    "section": "Left",
    "text": "Left"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#full",
    "href": "posts/tidy_dt/tidy_dt_translation.html#full",
    "title": "Tidyverse/data.table translations",
    "section": "Full",
    "text": "Full"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#tidy-4",
    "href": "posts/tidy_dt/tidy_dt_translation.html#tidy-4",
    "title": "Tidyverse/data.table translations",
    "section": "tidy",
    "text": "tidy\nacross() + where()\n\n\nCode\nmt_tbl |&gt; \n  transmute(across(where(is.character), \n                   ~str_sub(.x, 1, 5)))\n\n\n# A tibble: 32 √ó 1\n   model  \n   &lt;chr&gt;  \n 1 \"Mazda\"\n 2 \"Mazda\"\n 3 \"Datsu\"\n 4 \"Horne\"\n 5 \"Horne\"\n 6 \"Valia\"\n 7 \"Duste\"\n 8 \"Merc \"\n 9 \"Merc \"\n10 \"Merc \"\n# ‚Ñπ 22 more rows\n\n\nCode\nmt_tbl |&gt; \n  summarise(across(where(is.numeric),\n                   sum))\n\n\n# A tibble: 1 √ó 11\n    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  643.   198 7383.  4694  115.  103.  571.    14    13   118    90\n\n\n^ You can replace the where() calls with everything() or matches('d') or c(mpg, cyl, disp), or any of the usual tidyselect patterns to pick out the columns needed."
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#data.table-5",
    "href": "posts/tidy_dt/tidy_dt_translation.html#data.table-5",
    "title": "Tidyverse/data.table translations",
    "section": "data.table",
    "text": "data.table\n\nGet a character vector of the columns needed\nlapply() the intended function\nUse the special variable .SD and argument .SDcols\n\n\n\nCode\nnum_cols = mt_dt |&gt; sapply(is.numeric) |&gt; which() |&gt; names()\n\nmt_dt[, (num_cols) := lapply(.SD, sum), .SDcols = num_cols][]\n\n\n                  model   mpg   cyl   disp    hp   drat      wt   qsec    vs\n                 &lt;char&gt; &lt;num&gt; &lt;num&gt;  &lt;num&gt; &lt;num&gt;  &lt;num&gt;   &lt;num&gt;  &lt;num&gt; &lt;num&gt;\n 1:           Mazda RX4 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n 2:       Mazda RX4 Wag 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n 3:          Datsun 710 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n 4:      Hornet 4 Drive 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n 5:   Hornet Sportabout 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n 6:             Valiant 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n 7:          Duster 360 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n 8:           Merc 240D 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n 9:            Merc 230 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n10:            Merc 280 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n11:           Merc 280C 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n12:          Merc 450SE 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n13:          Merc 450SL 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n14:         Merc 450SLC 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n15:  Cadillac Fleetwood 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n16: Lincoln Continental 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n17:   Chrysler Imperial 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n18:            Fiat 128 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n19:         Honda Civic 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n20:      Toyota Corolla 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n21:       Toyota Corona 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n22:    Dodge Challenger 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n23:         AMC Javelin 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n24:          Camaro Z28 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n25:    Pontiac Firebird 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n26:           Fiat X1-9 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n27:       Porsche 914-2 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n28:        Lotus Europa 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n29:      Ford Pantera L 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n30:        Ferrari Dino 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n31:       Maserati Bora 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n32:          Volvo 142E 642.9   198 7383.1  4694 115.09 102.952 571.16    14\n                  model   mpg   cyl   disp    hp   drat      wt   qsec    vs\n       am  gear  carb\n    &lt;num&gt; &lt;num&gt; &lt;num&gt;\n 1:    13   118    90\n 2:    13   118    90\n 3:    13   118    90\n 4:    13   118    90\n 5:    13   118    90\n 6:    13   118    90\n 7:    13   118    90\n 8:    13   118    90\n 9:    13   118    90\n10:    13   118    90\n11:    13   118    90\n12:    13   118    90\n13:    13   118    90\n14:    13   118    90\n15:    13   118    90\n16:    13   118    90\n17:    13   118    90\n18:    13   118    90\n19:    13   118    90\n20:    13   118    90\n21:    13   118    90\n22:    13   118    90\n23:    13   118    90\n24:    13   118    90\n25:    13   118    90\n26:    13   118    90\n27:    13   118    90\n28:    13   118    90\n29:    13   118    90\n30:    13   118    90\n31:    13   118    90\n32:    13   118    90\n       am  gear  carb"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#tidy-5",
    "href": "posts/tidy_dt/tidy_dt_translation.html#tidy-5",
    "title": "Tidyverse/data.table translations",
    "section": "tidy",
    "text": "tidy\n\n\nCode\ndf |&gt; \n  separate_wider_delim(x, delim = '-',\n                       names = c('x1', 'x2'))\n\n\n# A tibble: 500,000 √ó 2\n   x1    x2   \n   &lt;chr&gt; &lt;chr&gt;\n 1 t     I    \n 2 k     L    \n 3 c     A    \n 4 v     V    \n 5 t     U    \n 6 g     W    \n 7 j     D    \n 8 m     F    \n 9 u     Q    \n10 t     N    \n# ‚Ñπ 499,990 more rows\n\n\nThis is one circumstance where an interface change bit me. It used to be that separate() with a data.table input would return a data.table output, now it gets converted to a tibble. separate_wider_delim() is still listed as ‚Äúlifecycle: experimental‚Äù, so that may change too."
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#data.table-6",
    "href": "posts/tidy_dt/tidy_dt_translation.html#data.table-6",
    "title": "Tidyverse/data.table translations",
    "section": "data.table",
    "text": "data.table\n\n\nCode\nas.data.table(df)[, (c(\"x1\", \"x2\")) := tstrsplit(x, split = \"-\")][]\n\n\n             x     x1     x2\n        &lt;char&gt; &lt;char&gt; &lt;char&gt;\n     1:    t-I      t      I\n     2:    k-L      k      L\n     3:    c-A      c      A\n     4:    v-V      v      V\n     5:    t-U      t      U\n    ---                     \n499996:    g-V      g      V\n499997:    n-T      n      T\n499998:    h-I      h      I\n499999:    m-Y      m      Y\n500000:    q-B      q      B\n\n\nThe tstrsplit() approach is ~10x faster than tidyr::separate(), but only about 1.5x faster than separate_wider_delim()."
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#tidy-6",
    "href": "posts/tidy_dt/tidy_dt_translation.html#tidy-6",
    "title": "Tidyverse/data.table translations",
    "section": "tidy",
    "text": "tidy\n\n\nCode\ndf |&gt; unite(x,\n            x1, x2,\n            sep = \"-\")\n\n\n    x\n1 a-A\n2 b-B\n3 c-C\n4 d-D\n5 e-E"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#data.table-7",
    "href": "posts/tidy_dt/tidy_dt_translation.html#data.table-7",
    "title": "Tidyverse/data.table translations",
    "section": "data.table",
    "text": "data.table\n\n\nCode\nas.data.table(df)[, x := paste(x1, x2, sep = \"-\")][]\n\n\n       x1     x2      x\n   &lt;char&gt; &lt;char&gt; &lt;char&gt;\n1:      a      A    a-A\n2:      b      B    b-B\n3:      c      C    c-C\n4:      d      D    d-D\n5:      e      E    e-E"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#tidy-7",
    "href": "posts/tidy_dt/tidy_dt_translation.html#tidy-7",
    "title": "Tidyverse/data.table translations",
    "section": "tidy",
    "text": "tidy\nTry input_tbl |&gt; as.matrix() |&gt; t() |&gt; as_tibble() if your variable types work, otherwise try input_tbl |&gt; pivot_longer() |&gt; pivot_wider() as needed.\n\n\nCode\nmt_tbl[1:4,] |&gt; \n  column_to_rownames('model') |&gt;\n  as.matrix() |&gt;\n  t() |&gt; \n  as.data.frame() |&gt;\n  rownames_to_column('variable') |&gt; as_tibble()\n\n\n# A tibble: 11 √ó 5\n   variable `Mazda RX4` `Mazda RX4 Wag` `Datsun 710` `Hornet 4 Drive`\n   &lt;chr&gt;          &lt;dbl&gt;           &lt;dbl&gt;        &lt;dbl&gt;            &lt;dbl&gt;\n 1 mpg            21              21           22.8             21.4 \n 2 cyl             6               6            4                6   \n 3 disp          160             160          108              258   \n 4 hp            110             110           93              110   \n 5 drat            3.9             3.9          3.85             3.08\n 6 wt              2.62            2.88         2.32             3.22\n 7 qsec           16.5            17.0         18.6             19.4 \n 8 vs              0               0            1                1   \n 9 am              1               1            1                0   \n10 gear            4               4            4                3   \n11 carb            4               4            1                1"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#data.table-8",
    "href": "posts/tidy_dt/tidy_dt_translation.html#data.table-8",
    "title": "Tidyverse/data.table translations",
    "section": "data.table",
    "text": "data.table\n\n\nCode\ndata.table::transpose(mt_dt[1:4,],\n                      make.names = 'model', # MAKE this variable the new names\n                      keep.names = 'variable') # KEEP the old names in this variable\n\n\n    variable Mazda RX4 Mazda RX4 Wag Datsun 710 Hornet 4 Drive\n      &lt;char&gt;     &lt;num&gt;         &lt;num&gt;      &lt;num&gt;          &lt;num&gt;\n 1:      mpg     21.00        21.000      22.80         21.400\n 2:      cyl      6.00         6.000       4.00          6.000\n 3:     disp    160.00       160.000     108.00        258.000\n 4:       hp    110.00       110.000      93.00        110.000\n 5:     drat      3.90         3.900       3.85          3.080\n 6:       wt      2.62         2.875       2.32          3.215\n 7:     qsec     16.46        17.020      18.61         19.440\n 8:       vs      0.00         0.000       1.00          1.000\n 9:       am      1.00         1.000       1.00          0.000\n10:     gear      4.00         4.000       4.00          3.000\n11:     carb      4.00         4.000       1.00          1.000"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#tidy-8",
    "href": "posts/tidy_dt/tidy_dt_translation.html#tidy-8",
    "title": "Tidyverse/data.table translations",
    "section": "tidy",
    "text": "tidy\n\n\nCode\nmt_tbl |&gt; nest(.by = cyl)\n\n\n# A tibble: 3 √ó 2\n    cyl data              \n  &lt;dbl&gt; &lt;list&gt;            \n1     6 &lt;tibble [7 √ó 11]&gt; \n2     4 &lt;tibble [11 √ó 11]&gt;\n3     8 &lt;tibble [14 √ó 11]&gt;"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#data.table-9",
    "href": "posts/tidy_dt/tidy_dt_translation.html#data.table-9",
    "title": "Tidyverse/data.table translations",
    "section": "data.table",
    "text": "data.table\n\n\nCode\nmt_dt[, .(data = .(.SD)), by = cyl]\n\n\n     cyl                data\n   &lt;num&gt;              &lt;list&gt;\n1:     6  &lt;data.table[7x11]&gt;\n2:     4 &lt;data.table[11x11]&gt;\n3:     8 &lt;data.table[14x11]&gt;"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#tidy-9",
    "href": "posts/tidy_dt/tidy_dt_translation.html#tidy-9",
    "title": "Tidyverse/data.table translations",
    "section": "tidy",
    "text": "tidy\n\n\nCode\nnested = mt_tbl |&gt; nest(.by = cyl)\nnested |&gt; unnest(data)\n\n\n# A tibble: 32 √ó 12\n     cyl model         mpg  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     6 Mazda RX4    21    160    110  3.9   2.62  16.5     0     1     4     4\n 2     6 Mazda RX4 ‚Ä¶  21    160    110  3.9   2.88  17.0     0     1     4     4\n 3     6 Hornet 4 D‚Ä¶  21.4  258    110  3.08  3.22  19.4     1     0     3     1\n 4     6 Valiant      18.1  225    105  2.76  3.46  20.2     1     0     3     1\n 5     6 Merc 280     19.2  168.   123  3.92  3.44  18.3     1     0     4     4\n 6     6 Merc 280C    17.8  168.   123  3.92  3.44  18.9     1     0     4     4\n 7     6 Ferrari Di‚Ä¶  19.7  145    175  3.62  2.77  15.5     0     1     5     6\n 8     4 Datsun 710   22.8  108     93  3.85  2.32  18.6     1     1     4     1\n 9     4 Merc 240D    24.4  147.    62  3.69  3.19  20       1     0     4     2\n10     4 Merc 230     22.8  141.    95  3.92  3.15  22.9     1     0     4     2\n# ‚Ñπ 22 more rows"
  },
  {
    "objectID": "posts/tidy_dt/tidy_dt_translation.html#data.table-10",
    "href": "posts/tidy_dt/tidy_dt_translation.html#data.table-10",
    "title": "Tidyverse/data.table translations",
    "section": "data.table",
    "text": "data.table\n\n\nCode\nnested = mt_dt[, .(data = list(.SD)), by = cyl]\nnested[, rbindlist(data), by = cyl] |&gt; head()\n\n\n     cyl          model   mpg  disp    hp  drat    wt  qsec    vs    am  gear\n   &lt;num&gt;         &lt;char&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;\n1:     6      Mazda RX4  21.0 160.0   110  3.90 2.620 16.46     0     1     4\n2:     6  Mazda RX4 Wag  21.0 160.0   110  3.90 2.875 17.02     0     1     4\n3:     6 Hornet 4 Drive  21.4 258.0   110  3.08 3.215 19.44     1     0     3\n4:     6        Valiant  18.1 225.0   105  2.76 3.460 20.22     1     0     3\n5:     6       Merc 280  19.2 167.6   123  3.92 3.440 18.30     1     0     4\n6:     6      Merc 280C  17.8 167.6   123  3.92 3.440 18.90     1     0     4\n    carb\n   &lt;num&gt;\n1:     4\n2:     4\n3:     1\n4:     1\n5:     4\n6:     4\n\n\nIf there‚Äôs only one column in the nested column:\n\n\nCode\ndt[,unlist(data), by = group]\n\n\nThis can be adapted to unlisting multiple nested columns, but as far as I can tell it can‚Äôt unlist from one nested column into multiple nested columns."
  },
  {
    "objectID": "posts/paste_image/paste_image.html",
    "href": "posts/paste_image/paste_image.html",
    "title": "Paste images from clipboard to Quarto/Rmarkdown",
    "section": "",
    "text": "A colleague asked if there was a way to paste an image from the clipboard to Rmd without having to manually save the image to a file and type out the file path. There‚Äôs no native way to do that as far as I can tell, but I came up with a bash script that:\n\nsaves the image from the clipboard to a specified file in my screenshots directory\nthen types ![](/path/to/the/file.png) where my cursor is\n\nBind this to a custom keyboard shortcut and you have the desired behavior.\n#!/bin/bash\n\nfilepath=/home/ghazi/Pictures/screenshots/$(date +%Y_%m_%d_%I:%M:%S_%p).png\n\nxclip -selection clipboard -t image/png -o &gt; $filepath\n\nsleep .7\n\nxdotool type '![](' $filepath ')'\nSome other notes:\n\nWhen selecting a key combination, don‚Äôt include Alt as one of the modifiers as that can move the selection focus from the text box to the menu bar\nThe sleep .7 is there because there needs to be time to release the keyboard shortcut, otherwise you‚Äôre effectively hitting dozens of Ctrl+Shift+&lt;every key on the file path&gt; shortcuts as the command is being typed before you‚Äôve released them. This led to some very strange behavior before figuring that out.\n\nIt would be nicer to have a while loop that detects when all keys are released, but this is good enough for me.\n\nfor Quarto documents, I think it‚Äôs necessary to set embed-resources: true in the YAML to get the absolute paths to work.\n\nBut my colleague is on macOS, which has neither xclip nor xdotool nor a non-terrible way to add custom keyboard shortcuts. Oh well‚Ä¶"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I‚Äôm a Statistical Geneticist at the Center for Computational Biomedicine at Harvard Medical School. I intend to use this blog to post about things that interest me (usually statistics related).\nIf you‚Äôd like to get notified of posts there‚Äôs an RSS feed. If you‚Äôd like to contact me you can find my work email on the CCB website."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "andrewghazi.github.io",
    "section": "",
    "text": "collapse is sick\n\n\n\n\n\n\n\nR\n\n\nbenchmark\n\n\n\n\n\n\n\n\n\n\n\nNov 29, 2023\n\n\nAndrew Ghazi\n\n\n\n\n\n\n  \n\n\n\n\nEffective color palettes\n\n\n\n\n\n\n\nR\n\n\nvisualization\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2023\n\n\nAndrew Ghazi\n\n\n\n\n\n\n  \n\n\n\n\ngeryon\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nOct 9, 2023\n\n\nAndrew Ghazi\n\n\n\n\n\n\n  \n\n\n\n\nPaste images from clipboard to Quarto/Rmarkdown\n\n\n\n\n\n\n\nQuarto\n\n\nRmarkdown\n\n\n\n\n\n\n\n\n\n\n\nOct 6, 2023\n\n\nAndrew Ghazi\n\n\n\n\n\n\n  \n\n\n\n\nezpzmcmcpcpca package\n\n\n\n\n\n\n\nR\n\n\nStan\n\n\n\n\n\n\n\n\n\n\n\nSep 30, 2023\n\n\nAndrew Ghazi\n\n\n\n\n\n\n  \n\n\n\n\nTidyverse/data.table translations\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nSep 28, 2023\n\n\nAndrew Ghazi\n\n\n\n\n\n\n  \n\n\n\n\nIntegrated LOO walkthrough\n\n\n\n\n\n\n\nR\n\n\nStan\n\n\nloo\n\n\n\n\n\n\n\n\n\n\n\nSep 22, 2023\n\n\nAndrew Ghazi\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/int_loo/integrated_loo.html",
    "href": "posts/int_loo/integrated_loo.html",
    "title": "Integrated LOO walkthrough",
    "section": "",
    "text": "This is a guide/walkthrough on how to use the ‚ÄúIntegrated Importance Sampling‚Äù aka ‚ÄúIntegrated LOO‚Äù technique from (Vehtari et al. 2016). I‚Äôve found myself needing to do this a couple times now, so I‚Äôm writing this walkthrough to:\n\ncrystallize my thoughts\nrecord my notes on how it works / how it‚Äôs done\nexplain how it works in more depth than the existing example I know of\nDemonstrate a more complicated example involving conditional parameter distributions\nshow how to perform the integral more flexibly in R / outside of Stan\n\nLoad some setup libraries:\n\n\nCode\nlibrary(cmdstanr)"
  },
  {
    "objectID": "posts/int_loo/integrated_loo.html#integrand-at-one-point-for-one-observation-in-one-draw",
    "href": "posts/int_loo/integrated_loo.html#integrand-at-one-point-for-one-observation-in-one-draw",
    "title": "Integrated LOO walkthrough",
    "section": "Integrand at one point for one observation in one draw",
    "text": "Integrand at one point for one observation in one draw\nLet‚Äôs evaluate the integrand for an (arbitrarily selected) phylogenetic effect of 0.333 for the fifth observation on the first draw:\n\n\nCode\nvec_integrand(0.333,\n    mu_bar_i1[5],\n    sigma_bar_ij = sigma_bar_i1[5],\n    draw_list[[1]]$sigma_resid, data_list$Y[5]\n)\n\n\n      t136 \n0.02345266 \n\n\nA reasonable-looking number, hooray!"
  },
  {
    "objectID": "posts/int_loo/integrated_loo.html#integral-for-one-observation-in-one-draw",
    "href": "posts/int_loo/integrated_loo.html#integral-for-one-observation-in-one-draw",
    "title": "Integrated LOO walkthrough",
    "section": "Integral for one observation in one draw",
    "text": "Integral for one observation in one draw\nInstead of just evaluating at an arbitrary point, let‚Äôs integrate it numerically. vec_integrand() as written actually has an analytic integral (the sum of two parabolas is just another parabola, so you can work out an expression for the integral), but I‚Äôm going to do it numerically for the more generic case (which I also do in anpan for logistic PGLMM LOO).\nIn the roaches example they use Stan‚Äôs built-in integrate_1d() function. While it‚Äôs nice to keep the log-likelihood calculation in the Stan program, the interface is unwieldy to me. You have to pass in ALL of the secondary real-valued arguments into the integrand function in a single argument, which is tricky when that includes many irregularly structured components. Same goes for integers. To me, doing the integral after the fact in R is much simpler. You can then hand the log-likelihood matrix directly to loo::loo().\nThe R function stats::integrate() uses adaptive quadrature to numerically integrate functions. I don‚Äôt know much about how it works, but it internally calls C code for the heavy lifting, so it‚Äôs pretty fast. It would be interesting to benchmark it against Stan‚Äôs integrate_1d().\nAnyway, you just hand stats::integrate() the function, the integration range, and other needed arguments.\n\n\nCode\nintegrate(vec_integrand,\n    -Inf, Inf,\n    mu_bar_ij = mu_bar_i1[5],\n    sigma_bar_ij = sigma_bar_i1[5],\n    sigma_resid = draw_list[[1]]$sigma_resid,\n    yi = data_list$Y[5]\n)\n\n\n0.1941623 with absolute error &lt; 3.8e-05\n\n\nAnother reasonable number, hooray!"
  },
  {
    "objectID": "posts/int_loo/integrated_loo.html#integral-for-all-observations-in-one-draw",
    "href": "posts/int_loo/integrated_loo.html#integral-for-all-observations-in-one-draw",
    "title": "Integrated LOO walkthrough",
    "section": "Integral for all observations in one draw",
    "text": "Integral for all observations in one draw\nGoing further, let‚Äôs write a couple functions to evaluate the integral for all observations in a given draw:\n\n\nCode\nintegrate_one_obs &lt;- function(mu_bar_ij, sigma_bar_ij, Y,\n    sigma_resid) {\n    integrate(\n        vec_integrand,\n        -Inf, Inf,\n        mu_bar_ij, sigma_bar_ij,\n        sigma_resid, Y\n    )$value\n}\n\nintegrate_all_obs &lt;- function(draw_j) {\n    mu_bar_ij &lt;- draw_j$phylo_effect_vectors[[1]] |&gt; get_mu_bar_ij()\n    sigma_bar_ij &lt;- draw_j$sigma_phylo |&gt; get_sigma_bar_ij(\n        corr_minus_i_list,\n        corr_12_list\n    )\n\n    mapply(integrate_one_obs,\n        mu_bar_ij, sigma_bar_ij, data_list$Y,\n        sigma_resid = draw_j$sigma_resid\n    )\n}\n\n\nsystem.time({\n    draw42_integrals &lt;- integrate_all_obs(draw_list[[42]])\n})\n\n\n   user  system elapsed \n   0.02    0.00    0.02 \n\n\nCode\ndraw42_integrals |&gt; round(digits = 2)\n\n\n  [1] 0.14 0.24 0.27 0.27 0.21 0.23 0.19 0.14 0.11 0.29 0.29 0.30 0.31 0.29 0.29\n [16] 0.24 0.09 0.25 0.05 0.34 0.33 0.23 0.18 0.21 0.33 0.34 0.30 0.03 0.30 0.20\n [31] 0.06 0.27 0.10 0.22 0.15 0.27 0.24 0.34 0.21 0.28 0.14 0.30 0.33 0.29 0.35\n [46] 0.31 0.20 0.25 0.28 0.28 0.29 0.33 0.31 0.00 0.04 0.34 0.28 0.33 0.32 0.33\n [61] 0.06 0.12 0.06 0.29 0.23 0.27 0.31 0.28 0.01 0.29 0.29 0.23 0.31 0.22 0.23\n [76] 0.32 0.27 0.28 0.34 0.33 0.29 0.13 0.26 0.22 0.34 0.22 0.34 0.27 0.10 0.28\n [91] 0.13 0.26 0.23 0.32 0.33 0.29 0.32 0.20 0.33 0.31 0.28 0.03 0.29 0.29 0.31\n[106] 0.07 0.39 0.20 0.11 0.31 0.28 0.30 0.30 0.27 0.09 0.31 0.16 0.03 0.26 0.12\n[121] 0.16 0.12 0.30 0.12 0.28 0.16 0.22 0.34 0.07 0.32 0.21 0.30 0.16 0.08 0.29\n[136] 0.07 0.19 0.27 0.26 0.31 0.33 0.32 0.07 0.29 0.30 0.15 0.09 0.10 0.25 0.16\n\n\nFast, reasonable likelihoods!"
  },
  {
    "objectID": "posts/int_loo/integrated_loo.html#integral-for-all-observations-across-all-draws",
    "href": "posts/int_loo/integrated_loo.html#integral-for-all-observations-across-all-draws",
    "title": "Integrated LOO walkthrough",
    "section": "Integral for all observations across all draws",
    "text": "Integral for all observations across all draws\nFinally, let‚Äôs apply it to every posterior draw. I just remembered that purrr::map() recently introduced a .progress argument, let‚Äôs use it. purrr is sick.\n\n\nCode\nlik_mat &lt;- purrr::map(draw_list,\n    integrate_all_obs,\n    .progress = interactive()\n) |&gt;\n    purrr::reduce(rbind)\n\n\nIt only takes a minute on my laptop, but of course with larger datasets / more complicated models it can slow down a bit. That purrr::map() call is embarassingly parallelizable.\nFinally we can see the loo results with the stable Pareto k diagnostics. We feed in the chain ID numbers so that loo is aware of the relative effective sample sizes:\n\n\nCode\nloo::loo(log(lik_mat),\n    r_eff = loo::relative_eff(lik_mat,\n        chain_id = draw_df$`.chain`\n    )\n)\n\n\nWarning: Some Pareto k diagnostic values are slightly high. See help('pareto-k-diagnostic') for details.\n\n\n\nComputed from 4000 by 150 log-likelihood matrix\n\n         Estimate   SE\nelpd_loo   -259.6  7.8\np_loo        16.5  1.7\nlooic       519.1 15.6\n------\nMonte Carlo SE of elpd_loo is 0.1.\n\nPareto k diagnostic values:\n                         Count Pct.    Min. n_eff\n(-Inf, 0.5]   (good)     149   99.3%   852       \n (0.5, 0.7]   (ok)         1    0.7%   1762      \n   (0.7, 1]   (bad)        0    0.0%   &lt;NA&gt;      \n   (1, Inf)   (very bad)   0    0.0%   &lt;NA&gt;      \n\nAll Pareto k estimates are ok (k &lt; 0.7).\nSee help('pareto-k-diagnostic') for details.\n\n\nOkay, so there may be one or two that are just ‚Äúok‚Äù, but way, way better and totally usable!"
  },
  {
    "objectID": "posts/int_loo/integrated_loo.html#integral-scale",
    "href": "posts/int_loo/integrated_loo.html#integral-scale",
    "title": "Integrated LOO walkthrough",
    "section": "Integral scale",
    "text": "Integral scale\nThe integral has to be evaluated on the identity scale, not the log scale. It has to be \\(log(\\int{exp(loglik)d\\theta})\\). \\(\\int{loglik d\\theta}\\) won‚Äôt work. This can cause over/underflow issues depending on the model / data.\nThis post is already too long, so I won‚Äôt demonstrate it here, but the key to overcoming this is a technique akin to the LogSumExp() trick, kind of like LogIntExp() or something. Optimize the integrand, then use the optimal value as an offset when integrating, then subtract the contribution of that constant off of the integral."
  },
  {
    "objectID": "posts/int_loo/integrated_loo.html#woodbury-fuzz",
    "href": "posts/int_loo/integrated_loo.html#woodbury-fuzz",
    "title": "Integrated LOO walkthrough",
    "section": "Woodbury fuzz",
    "text": "Woodbury fuzz\nThe aforementioned Woodbury matrix identity can dramatically speed up the computation of conditional distributions, but it can also add a degree of numerical fuzz. Supposedly the scale of this numerical error is not well understood, and in the case of PGLMMs when the correlation matrix is poorly conditioned the error can induce estimates of standard deviations that are negative. In anpan I check for this and if it appears to happen I use a naive call to solve() as a backup."
  },
  {
    "objectID": "posts/int_loo/integrated_loo.html#adaptive-quadrature-hiccups",
    "href": "posts/int_loo/integrated_loo.html#adaptive-quadrature-hiccups",
    "title": "Integrated LOO walkthrough",
    "section": "Adaptive quadrature hiccups",
    "text": "Adaptive quadrature hiccups\nAlso of concern are the integration limits. Sometimes, for very low values of sigma_phylo in this case, the integrand function can be extremely sharp. To stats::integrate() it will look like a flat function at 0, so you‚Äôll get 0. anpan uses some tricks to optimize the integrand on the log scale, look at the curvature, then go out a reasonable number of SDs in order to capture the body of the spike. Different sorts of problems can also occur if the integrand is extremely flat and you chose a poor offset value."
  },
  {
    "objectID": "posts/geryon/geryon.html",
    "href": "posts/geryon/geryon.html",
    "title": "geryon",
    "section": "",
    "text": "Like many R users, I have over time accrued a number of miscellaneous R functions that I put into a little utilities package. It‚Äôs called geryon. The readme explains (most) of the functionality, but I‚Äôm quite fond of the logo:"
  },
  {
    "objectID": "posts/collapse_is_sick/sick.html",
    "href": "posts/collapse_is_sick/sick.html",
    "title": "collapse is sick",
    "section": "",
    "text": "I saw an R package I hadn‚Äôt heard of called collapse performing well on the duckdb database-like ops benchmark, and I thought I‚Äôd try it out on a little statistical simulation. tl;dr: collapse is sick."
  },
  {
    "objectID": "posts/collapse_is_sick/sick.html#dplyr",
    "href": "posts/collapse_is_sick/sick.html#dplyr",
    "title": "collapse is sick",
    "section": "dplyr",
    "text": "dplyr\nSo easy to write, so clean.\n\n\nCode\ndplyr_soln = function(val_dt) {\n  val_dt |&gt;\n    group_by(g) |&gt;\n    summarise(p = 2 * pt(abs(mean(x) * sqrt(6) / sd(x)), \n                         5, lower.tail = FALSE))\n}"
  },
  {
    "objectID": "posts/collapse_is_sick/sick.html#data.table-two-ways",
    "href": "posts/collapse_is_sick/sick.html#data.table-two-ways",
    "title": "collapse is sick",
    "section": "data.table two ways",
    "text": "data.table two ways\nMy first attempt didn‚Äôt perform as well as I would have hoped, which turned out because I wasn‚Äôt using the GForce-optimized functions for the mean and standard deviation. To use those, the expression in j can ONLY contain the GForce-optimized functions min, max, mean, median, var, sd, sum, prod, first, last, head, tail. base::Arithmetic and stats::pt are not among them!\nTo solve this I used two data.table chained expressions [][]. It‚Äôs possible that there‚Äôs a more performant way to do it in one pass over the groups (while still using GForce), but I wanted to keep it to within the realm of functions I know how to write intuitively.\n\n\nCode\ndt_soln = function(val_dt) {\n  val_dt[,.(p = 2 * pt(abs(mean(x) / (sd(x) / sqrt(6))), \n                       5, lower.tail = FALSE)), \n         by = g]\n}\n\ndt_fast_soln = function(val_dt) {\n  \n  val_dt[,.(m = mean(x),\n            s = sd(x)),\n         by = g][, p := 2 * (1 - pt(abs(m * sqrt(6) / s),\n                                    5, lower.tail = FALSE))]\n}"
  },
  {
    "objectID": "posts/collapse_is_sick/sick.html#collapse",
    "href": "posts/collapse_is_sick/sick.html#collapse",
    "title": "collapse is sick",
    "section": "collapse",
    "text": "collapse\nI‚Äôll talk about the amazing performance later, but what really impressed me is how easy it was to write. I literally just copy-pasted my dplyr solution (the gold standard of ‚Äúeasy to write‚Äù IMO) then typed four ‚Äúf‚Äùs to switch to the collapse version of the dplyr/base functions (e.g.¬†summarise() -&gt; fsummarise()).\nFor me, ‚Äúeasy to write‚Äù is a HUGE benefit. Difficult to quantify, but so, so important for the interactive programming I do 80% of the time.\n\n\nCode\ncollapse_soln = function(val_dt) {\n  val_dt |&gt;\n  # V here\n    fgroup_by(g) |&gt;\n  # V here                    V here               V and here\n    fsummarise(p = 2 * pt(abs(fmean(x) * sqrt(6) / fsd(x)), \n                          5, lower.tail = FALSE))\n}"
  }
]